//
// Autogenerated by Thrift Compiler (0.17.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = require('./Hbase_types');
//HELPER FUNCTIONS AND STRUCTURES

var Hbase_enableTable_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
  }
};
Hbase_enableTable_args.prototype = {};
Hbase_enableTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_enableTable_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_enableTable_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_enableTable_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
Hbase_enableTable_result.prototype = {};
Hbase_enableTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_enableTable_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_enableTable_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_disableTable_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
  }
};
Hbase_disableTable_args.prototype = {};
Hbase_disableTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_disableTable_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_disableTable_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_disableTable_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
Hbase_disableTable_result.prototype = {};
Hbase_disableTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_disableTable_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_disableTable_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_isTableEnabled_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
  }
};
Hbase_isTableEnabled_args.prototype = {};
Hbase_isTableEnabled_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_isTableEnabled_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_isTableEnabled_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_isTableEnabled_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
Hbase_isTableEnabled_result.prototype = {};
Hbase_isTableEnabled_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_isTableEnabled_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_isTableEnabled_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_compact_args = function(args) {
  this.tableNameOrRegionName = null;
  if (args) {
    if (args.tableNameOrRegionName !== undefined && args.tableNameOrRegionName !== null) {
      this.tableNameOrRegionName = args.tableNameOrRegionName;
    }
  }
};
Hbase_compact_args.prototype = {};
Hbase_compact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableNameOrRegionName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_compact_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_compact_args');
  if (this.tableNameOrRegionName !== null && this.tableNameOrRegionName !== undefined) {
    output.writeFieldBegin('tableNameOrRegionName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableNameOrRegionName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_compact_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
Hbase_compact_result.prototype = {};
Hbase_compact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_compact_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_compact_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_majorCompact_args = function(args) {
  this.tableNameOrRegionName = null;
  if (args) {
    if (args.tableNameOrRegionName !== undefined && args.tableNameOrRegionName !== null) {
      this.tableNameOrRegionName = args.tableNameOrRegionName;
    }
  }
};
Hbase_majorCompact_args.prototype = {};
Hbase_majorCompact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableNameOrRegionName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_majorCompact_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_majorCompact_args');
  if (this.tableNameOrRegionName !== null && this.tableNameOrRegionName !== undefined) {
    output.writeFieldBegin('tableNameOrRegionName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableNameOrRegionName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_majorCompact_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
Hbase_majorCompact_result.prototype = {};
Hbase_majorCompact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_majorCompact_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_majorCompact_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getTableNames_args = function(args) {
};
Hbase_getTableNames_args.prototype = {};
Hbase_getTableNames_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getTableNames_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getTableNames_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getTableNames_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
Hbase_getTableNames_result.prototype = {};
Hbase_getTableNames_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp333 = input.readListBegin();
        var _size32 = _rtmp333.size || 0;
        for (var _i34 = 0; _i34 < _size32; ++_i34) {
          var elem35 = null;
          elem35 = input.readBinary();
          this.success.push(elem35);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getTableNames_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getTableNames_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter36 in this.success) {
      if (this.success.hasOwnProperty(iter36)) {
        iter36 = this.success[iter36];
        output.writeBinary(iter36);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getColumnDescriptors_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
  }
};
Hbase_getColumnDescriptors_args.prototype = {};
Hbase_getColumnDescriptors_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getColumnDescriptors_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getColumnDescriptors_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getColumnDescriptors_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [ttypes.ColumnDescriptor]);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
Hbase_getColumnDescriptors_result.prototype = {};
Hbase_getColumnDescriptors_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        this.success = {};
        var _rtmp338 = input.readMapBegin();
        var _size37 = _rtmp338.size || 0;
        for (var _i39 = 0; _i39 < _size37; ++_i39) {
          var key40 = null;
          var val41 = null;
          key40 = input.readBinary();
          val41 = new ttypes.ColumnDescriptor();
          val41.read(input);
          this.success[key40] = val41;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getColumnDescriptors_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getColumnDescriptors_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter42 in this.success) {
      if (this.success.hasOwnProperty(kiter42)) {
        var viter43 = this.success[kiter42];
        output.writeBinary(kiter42);
        viter43.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getTableRegions_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
  }
};
Hbase_getTableRegions_args.prototype = {};
Hbase_getTableRegions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getTableRegions_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getTableRegions_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getTableRegions_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TRegionInfo]);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
Hbase_getTableRegions_result.prototype = {};
Hbase_getTableRegions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp345 = input.readListBegin();
        var _size44 = _rtmp345.size || 0;
        for (var _i46 = 0; _i46 < _size44; ++_i46) {
          var elem47 = null;
          elem47 = new ttypes.TRegionInfo();
          elem47.read(input);
          this.success.push(elem47);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getTableRegions_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getTableRegions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter48 in this.success) {
      if (this.success.hasOwnProperty(iter48)) {
        iter48 = this.success[iter48];
        iter48.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_createTable_args = function(args) {
  this.tableName = null;
  this.columnFamilies = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.columnFamilies !== undefined && args.columnFamilies !== null) {
      this.columnFamilies = Thrift.copyList(args.columnFamilies, [ttypes.ColumnDescriptor]);
    }
  }
};
Hbase_createTable_args.prototype = {};
Hbase_createTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.columnFamilies = [];
        var _rtmp350 = input.readListBegin();
        var _size49 = _rtmp350.size || 0;
        for (var _i51 = 0; _i51 < _size49; ++_i51) {
          var elem52 = null;
          elem52 = new ttypes.ColumnDescriptor();
          elem52.read(input);
          this.columnFamilies.push(elem52);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_createTable_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_createTable_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.columnFamilies !== null && this.columnFamilies !== undefined) {
    output.writeFieldBegin('columnFamilies', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.columnFamilies.length);
    for (var iter53 in this.columnFamilies) {
      if (this.columnFamilies.hasOwnProperty(iter53)) {
        iter53 = this.columnFamilies[iter53];
        iter53.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_createTable_result = function(args) {
  this.io = null;
  this.ia = null;
  this.exist = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args instanceof ttypes.AlreadyExists) {
    this.exist = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
    if (args.ia !== undefined && args.ia !== null) {
      this.ia = args.ia;
    }
    if (args.exist !== undefined && args.exist !== null) {
      this.exist = args.exist;
    }
  }
};
Hbase_createTable_result.prototype = {};
Hbase_createTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.exist = new ttypes.AlreadyExists();
        this.exist.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_createTable_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_createTable_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  if (this.exist !== null && this.exist !== undefined) {
    output.writeFieldBegin('exist', Thrift.Type.STRUCT, 3);
    this.exist.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_deleteTable_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
  }
};
Hbase_deleteTable_args.prototype = {};
Hbase_deleteTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteTable_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteTable_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_deleteTable_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
Hbase_deleteTable_result.prototype = {};
Hbase_deleteTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteTable_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteTable_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_get_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.column = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.column !== undefined && args.column !== null) {
      this.column = args.column;
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
  }
};
Hbase_get_args.prototype = {};
Hbase_get_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.attributes = {};
        var _rtmp355 = input.readMapBegin();
        var _size54 = _rtmp355.size || 0;
        for (var _i56 = 0; _i56 < _size54; ++_i56) {
          var key57 = null;
          var val58 = null;
          key57 = input.readBinary();
          val58 = input.readBinary();
          this.attributes[key57] = val58;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_get_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_get_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3);
    output.writeBinary(this.column);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter59 in this.attributes) {
      if (this.attributes.hasOwnProperty(kiter59)) {
        var viter60 = this.attributes[kiter59];
        output.writeBinary(kiter59);
        output.writeBinary(viter60);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_get_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TCell]);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
Hbase_get_result.prototype = {};
Hbase_get_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp362 = input.readListBegin();
        var _size61 = _rtmp362.size || 0;
        for (var _i63 = 0; _i63 < _size61; ++_i63) {
          var elem64 = null;
          elem64 = new ttypes.TCell();
          elem64.read(input);
          this.success.push(elem64);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_get_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_get_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter65 in this.success) {
      if (this.success.hasOwnProperty(iter65)) {
        iter65 = this.success[iter65];
        iter65.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getVer_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.column = null;
  this.numVersions = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.column !== undefined && args.column !== null) {
      this.column = args.column;
    }
    if (args.numVersions !== undefined && args.numVersions !== null) {
      this.numVersions = args.numVersions;
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
  }
};
Hbase_getVer_args.prototype = {};
Hbase_getVer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.numVersions = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        this.attributes = {};
        var _rtmp367 = input.readMapBegin();
        var _size66 = _rtmp367.size || 0;
        for (var _i68 = 0; _i68 < _size66; ++_i68) {
          var key69 = null;
          var val70 = null;
          key69 = input.readBinary();
          val70 = input.readBinary();
          this.attributes[key69] = val70;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getVer_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getVer_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3);
    output.writeBinary(this.column);
    output.writeFieldEnd();
  }
  if (this.numVersions !== null && this.numVersions !== undefined) {
    output.writeFieldBegin('numVersions', Thrift.Type.I32, 4);
    output.writeI32(this.numVersions);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter71 in this.attributes) {
      if (this.attributes.hasOwnProperty(kiter71)) {
        var viter72 = this.attributes[kiter71];
        output.writeBinary(kiter71);
        output.writeBinary(viter72);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getVer_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TCell]);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
Hbase_getVer_result.prototype = {};
Hbase_getVer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp374 = input.readListBegin();
        var _size73 = _rtmp374.size || 0;
        for (var _i75 = 0; _i75 < _size73; ++_i75) {
          var elem76 = null;
          elem76 = new ttypes.TCell();
          elem76.read(input);
          this.success.push(elem76);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getVer_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getVer_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter77 in this.success) {
      if (this.success.hasOwnProperty(iter77)) {
        iter77 = this.success[iter77];
        iter77.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getVerTs_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.column = null;
  this.timestamp = null;
  this.numVersions = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.column !== undefined && args.column !== null) {
      this.column = args.column;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.numVersions !== undefined && args.numVersions !== null) {
      this.numVersions = args.numVersions;
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
  }
};
Hbase_getVerTs_args.prototype = {};
Hbase_getVerTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.numVersions = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        this.attributes = {};
        var _rtmp379 = input.readMapBegin();
        var _size78 = _rtmp379.size || 0;
        for (var _i80 = 0; _i80 < _size78; ++_i80) {
          var key81 = null;
          var val82 = null;
          key81 = input.readBinary();
          val82 = input.readBinary();
          this.attributes[key81] = val82;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getVerTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getVerTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3);
    output.writeBinary(this.column);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.numVersions !== null && this.numVersions !== undefined) {
    output.writeFieldBegin('numVersions', Thrift.Type.I32, 5);
    output.writeI32(this.numVersions);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter83 in this.attributes) {
      if (this.attributes.hasOwnProperty(kiter83)) {
        var viter84 = this.attributes[kiter83];
        output.writeBinary(kiter83);
        output.writeBinary(viter84);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getVerTs_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TCell]);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
Hbase_getVerTs_result.prototype = {};
Hbase_getVerTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp386 = input.readListBegin();
        var _size85 = _rtmp386.size || 0;
        for (var _i87 = 0; _i87 < _size85; ++_i87) {
          var elem88 = null;
          elem88 = new ttypes.TCell();
          elem88.read(input);
          this.success.push(elem88);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getVerTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getVerTs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter89 in this.success) {
      if (this.success.hasOwnProperty(iter89)) {
        iter89 = this.success[iter89];
        iter89.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getRow_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
  }
};
Hbase_getRow_args.prototype = {};
Hbase_getRow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        this.attributes = {};
        var _rtmp391 = input.readMapBegin();
        var _size90 = _rtmp391.size || 0;
        for (var _i92 = 0; _i92 < _size90; ++_i92) {
          var key93 = null;
          var val94 = null;
          key93 = input.readBinary();
          val94 = input.readBinary();
          this.attributes[key93] = val94;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRow_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRow_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter95 in this.attributes) {
      if (this.attributes.hasOwnProperty(kiter95)) {
        var viter96 = this.attributes[kiter95];
        output.writeBinary(kiter95);
        output.writeBinary(viter96);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getRow_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TRowResult]);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
Hbase_getRow_result.prototype = {};
Hbase_getRow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp398 = input.readListBegin();
        var _size97 = _rtmp398.size || 0;
        for (var _i99 = 0; _i99 < _size97; ++_i99) {
          var elem100 = null;
          elem100 = new ttypes.TRowResult();
          elem100.read(input);
          this.success.push(elem100);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRow_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRow_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter101 in this.success) {
      if (this.success.hasOwnProperty(iter101)) {
        iter101 = this.success[iter101];
        iter101.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getRowWithColumns_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.columns = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.columns !== undefined && args.columns !== null) {
      this.columns = Thrift.copyList(args.columns, [null]);
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
  }
};
Hbase_getRowWithColumns_args.prototype = {};
Hbase_getRowWithColumns_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.columns = [];
        var _rtmp3103 = input.readListBegin();
        var _size102 = _rtmp3103.size || 0;
        for (var _i104 = 0; _i104 < _size102; ++_i104) {
          var elem105 = null;
          elem105 = input.readBinary();
          this.columns.push(elem105);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.attributes = {};
        var _rtmp3107 = input.readMapBegin();
        var _size106 = _rtmp3107.size || 0;
        for (var _i108 = 0; _i108 < _size106; ++_i108) {
          var key109 = null;
          var val110 = null;
          key109 = input.readBinary();
          val110 = input.readBinary();
          this.attributes[key109] = val110;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowWithColumns_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowWithColumns_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter111 in this.columns) {
      if (this.columns.hasOwnProperty(iter111)) {
        iter111 = this.columns[iter111];
        output.writeBinary(iter111);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter112 in this.attributes) {
      if (this.attributes.hasOwnProperty(kiter112)) {
        var viter113 = this.attributes[kiter112];
        output.writeBinary(kiter112);
        output.writeBinary(viter113);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getRowWithColumns_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TRowResult]);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
Hbase_getRowWithColumns_result.prototype = {};
Hbase_getRowWithColumns_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3115 = input.readListBegin();
        var _size114 = _rtmp3115.size || 0;
        for (var _i116 = 0; _i116 < _size114; ++_i116) {
          var elem117 = null;
          elem117 = new ttypes.TRowResult();
          elem117.read(input);
          this.success.push(elem117);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowWithColumns_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowWithColumns_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter118 in this.success) {
      if (this.success.hasOwnProperty(iter118)) {
        iter118 = this.success[iter118];
        iter118.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getRowTs_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
  }
};
Hbase_getRowTs_args.prototype = {};
Hbase_getRowTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.attributes = {};
        var _rtmp3120 = input.readMapBegin();
        var _size119 = _rtmp3120.size || 0;
        for (var _i121 = 0; _i121 < _size119; ++_i121) {
          var key122 = null;
          var val123 = null;
          key122 = input.readBinary();
          val123 = input.readBinary();
          this.attributes[key122] = val123;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter124 in this.attributes) {
      if (this.attributes.hasOwnProperty(kiter124)) {
        var viter125 = this.attributes[kiter124];
        output.writeBinary(kiter124);
        output.writeBinary(viter125);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getRowTs_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TRowResult]);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
Hbase_getRowTs_result.prototype = {};
Hbase_getRowTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3127 = input.readListBegin();
        var _size126 = _rtmp3127.size || 0;
        for (var _i128 = 0; _i128 < _size126; ++_i128) {
          var elem129 = null;
          elem129 = new ttypes.TRowResult();
          elem129.read(input);
          this.success.push(elem129);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowTs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter130 in this.success) {
      if (this.success.hasOwnProperty(iter130)) {
        iter130 = this.success[iter130];
        iter130.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getRowWithColumnsTs_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.columns = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.columns !== undefined && args.columns !== null) {
      this.columns = Thrift.copyList(args.columns, [null]);
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
  }
};
Hbase_getRowWithColumnsTs_args.prototype = {};
Hbase_getRowWithColumnsTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.columns = [];
        var _rtmp3132 = input.readListBegin();
        var _size131 = _rtmp3132.size || 0;
        for (var _i133 = 0; _i133 < _size131; ++_i133) {
          var elem134 = null;
          elem134 = input.readBinary();
          this.columns.push(elem134);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        this.attributes = {};
        var _rtmp3136 = input.readMapBegin();
        var _size135 = _rtmp3136.size || 0;
        for (var _i137 = 0; _i137 < _size135; ++_i137) {
          var key138 = null;
          var val139 = null;
          key138 = input.readBinary();
          val139 = input.readBinary();
          this.attributes[key138] = val139;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowWithColumnsTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowWithColumnsTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter140 in this.columns) {
      if (this.columns.hasOwnProperty(iter140)) {
        iter140 = this.columns[iter140];
        output.writeBinary(iter140);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter141 in this.attributes) {
      if (this.attributes.hasOwnProperty(kiter141)) {
        var viter142 = this.attributes[kiter141];
        output.writeBinary(kiter141);
        output.writeBinary(viter142);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getRowWithColumnsTs_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TRowResult]);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
Hbase_getRowWithColumnsTs_result.prototype = {};
Hbase_getRowWithColumnsTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3144 = input.readListBegin();
        var _size143 = _rtmp3144.size || 0;
        for (var _i145 = 0; _i145 < _size143; ++_i145) {
          var elem146 = null;
          elem146 = new ttypes.TRowResult();
          elem146.read(input);
          this.success.push(elem146);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowWithColumnsTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowWithColumnsTs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter147 in this.success) {
      if (this.success.hasOwnProperty(iter147)) {
        iter147 = this.success[iter147];
        iter147.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getRows_args = function(args) {
  this.tableName = null;
  this.rows = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.rows !== undefined && args.rows !== null) {
      this.rows = Thrift.copyList(args.rows, [null]);
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
  }
};
Hbase_getRows_args.prototype = {};
Hbase_getRows_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.rows = [];
        var _rtmp3149 = input.readListBegin();
        var _size148 = _rtmp3149.size || 0;
        for (var _i150 = 0; _i150 < _size148; ++_i150) {
          var elem151 = null;
          elem151 = input.readBinary();
          this.rows.push(elem151);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        this.attributes = {};
        var _rtmp3153 = input.readMapBegin();
        var _size152 = _rtmp3153.size || 0;
        for (var _i154 = 0; _i154 < _size152; ++_i154) {
          var key155 = null;
          var val156 = null;
          key155 = input.readBinary();
          val156 = input.readBinary();
          this.attributes[key155] = val156;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRows_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRows_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.rows.length);
    for (var iter157 in this.rows) {
      if (this.rows.hasOwnProperty(iter157)) {
        iter157 = this.rows[iter157];
        output.writeBinary(iter157);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter158 in this.attributes) {
      if (this.attributes.hasOwnProperty(kiter158)) {
        var viter159 = this.attributes[kiter158];
        output.writeBinary(kiter158);
        output.writeBinary(viter159);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getRows_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TRowResult]);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
Hbase_getRows_result.prototype = {};
Hbase_getRows_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3161 = input.readListBegin();
        var _size160 = _rtmp3161.size || 0;
        for (var _i162 = 0; _i162 < _size160; ++_i162) {
          var elem163 = null;
          elem163 = new ttypes.TRowResult();
          elem163.read(input);
          this.success.push(elem163);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRows_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRows_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter164 in this.success) {
      if (this.success.hasOwnProperty(iter164)) {
        iter164 = this.success[iter164];
        iter164.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getRowsWithColumns_args = function(args) {
  this.tableName = null;
  this.rows = null;
  this.columns = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.rows !== undefined && args.rows !== null) {
      this.rows = Thrift.copyList(args.rows, [null]);
    }
    if (args.columns !== undefined && args.columns !== null) {
      this.columns = Thrift.copyList(args.columns, [null]);
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
  }
};
Hbase_getRowsWithColumns_args.prototype = {};
Hbase_getRowsWithColumns_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.rows = [];
        var _rtmp3166 = input.readListBegin();
        var _size165 = _rtmp3166.size || 0;
        for (var _i167 = 0; _i167 < _size165; ++_i167) {
          var elem168 = null;
          elem168 = input.readBinary();
          this.rows.push(elem168);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.columns = [];
        var _rtmp3170 = input.readListBegin();
        var _size169 = _rtmp3170.size || 0;
        for (var _i171 = 0; _i171 < _size169; ++_i171) {
          var elem172 = null;
          elem172 = input.readBinary();
          this.columns.push(elem172);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.attributes = {};
        var _rtmp3174 = input.readMapBegin();
        var _size173 = _rtmp3174.size || 0;
        for (var _i175 = 0; _i175 < _size173; ++_i175) {
          var key176 = null;
          var val177 = null;
          key176 = input.readBinary();
          val177 = input.readBinary();
          this.attributes[key176] = val177;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowsWithColumns_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowsWithColumns_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.rows.length);
    for (var iter178 in this.rows) {
      if (this.rows.hasOwnProperty(iter178)) {
        iter178 = this.rows[iter178];
        output.writeBinary(iter178);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter179 in this.columns) {
      if (this.columns.hasOwnProperty(iter179)) {
        iter179 = this.columns[iter179];
        output.writeBinary(iter179);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter180 in this.attributes) {
      if (this.attributes.hasOwnProperty(kiter180)) {
        var viter181 = this.attributes[kiter180];
        output.writeBinary(kiter180);
        output.writeBinary(viter181);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getRowsWithColumns_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TRowResult]);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
Hbase_getRowsWithColumns_result.prototype = {};
Hbase_getRowsWithColumns_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3183 = input.readListBegin();
        var _size182 = _rtmp3183.size || 0;
        for (var _i184 = 0; _i184 < _size182; ++_i184) {
          var elem185 = null;
          elem185 = new ttypes.TRowResult();
          elem185.read(input);
          this.success.push(elem185);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowsWithColumns_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowsWithColumns_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter186 in this.success) {
      if (this.success.hasOwnProperty(iter186)) {
        iter186 = this.success[iter186];
        iter186.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getRowsTs_args = function(args) {
  this.tableName = null;
  this.rows = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.rows !== undefined && args.rows !== null) {
      this.rows = Thrift.copyList(args.rows, [null]);
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
  }
};
Hbase_getRowsTs_args.prototype = {};
Hbase_getRowsTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.rows = [];
        var _rtmp3188 = input.readListBegin();
        var _size187 = _rtmp3188.size || 0;
        for (var _i189 = 0; _i189 < _size187; ++_i189) {
          var elem190 = null;
          elem190 = input.readBinary();
          this.rows.push(elem190);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.attributes = {};
        var _rtmp3192 = input.readMapBegin();
        var _size191 = _rtmp3192.size || 0;
        for (var _i193 = 0; _i193 < _size191; ++_i193) {
          var key194 = null;
          var val195 = null;
          key194 = input.readBinary();
          val195 = input.readBinary();
          this.attributes[key194] = val195;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowsTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowsTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.rows.length);
    for (var iter196 in this.rows) {
      if (this.rows.hasOwnProperty(iter196)) {
        iter196 = this.rows[iter196];
        output.writeBinary(iter196);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter197 in this.attributes) {
      if (this.attributes.hasOwnProperty(kiter197)) {
        var viter198 = this.attributes[kiter197];
        output.writeBinary(kiter197);
        output.writeBinary(viter198);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getRowsTs_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TRowResult]);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
Hbase_getRowsTs_result.prototype = {};
Hbase_getRowsTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3200 = input.readListBegin();
        var _size199 = _rtmp3200.size || 0;
        for (var _i201 = 0; _i201 < _size199; ++_i201) {
          var elem202 = null;
          elem202 = new ttypes.TRowResult();
          elem202.read(input);
          this.success.push(elem202);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowsTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowsTs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter203 in this.success) {
      if (this.success.hasOwnProperty(iter203)) {
        iter203 = this.success[iter203];
        iter203.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getRowsWithColumnsTs_args = function(args) {
  this.tableName = null;
  this.rows = null;
  this.columns = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.rows !== undefined && args.rows !== null) {
      this.rows = Thrift.copyList(args.rows, [null]);
    }
    if (args.columns !== undefined && args.columns !== null) {
      this.columns = Thrift.copyList(args.columns, [null]);
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
  }
};
Hbase_getRowsWithColumnsTs_args.prototype = {};
Hbase_getRowsWithColumnsTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.rows = [];
        var _rtmp3205 = input.readListBegin();
        var _size204 = _rtmp3205.size || 0;
        for (var _i206 = 0; _i206 < _size204; ++_i206) {
          var elem207 = null;
          elem207 = input.readBinary();
          this.rows.push(elem207);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.columns = [];
        var _rtmp3209 = input.readListBegin();
        var _size208 = _rtmp3209.size || 0;
        for (var _i210 = 0; _i210 < _size208; ++_i210) {
          var elem211 = null;
          elem211 = input.readBinary();
          this.columns.push(elem211);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        this.attributes = {};
        var _rtmp3213 = input.readMapBegin();
        var _size212 = _rtmp3213.size || 0;
        for (var _i214 = 0; _i214 < _size212; ++_i214) {
          var key215 = null;
          var val216 = null;
          key215 = input.readBinary();
          val216 = input.readBinary();
          this.attributes[key215] = val216;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowsWithColumnsTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowsWithColumnsTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.rows.length);
    for (var iter217 in this.rows) {
      if (this.rows.hasOwnProperty(iter217)) {
        iter217 = this.rows[iter217];
        output.writeBinary(iter217);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter218 in this.columns) {
      if (this.columns.hasOwnProperty(iter218)) {
        iter218 = this.columns[iter218];
        output.writeBinary(iter218);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter219 in this.attributes) {
      if (this.attributes.hasOwnProperty(kiter219)) {
        var viter220 = this.attributes[kiter219];
        output.writeBinary(kiter219);
        output.writeBinary(viter220);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getRowsWithColumnsTs_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TRowResult]);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
Hbase_getRowsWithColumnsTs_result.prototype = {};
Hbase_getRowsWithColumnsTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3222 = input.readListBegin();
        var _size221 = _rtmp3222.size || 0;
        for (var _i223 = 0; _i223 < _size221; ++_i223) {
          var elem224 = null;
          elem224 = new ttypes.TRowResult();
          elem224.read(input);
          this.success.push(elem224);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowsWithColumnsTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowsWithColumnsTs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter225 in this.success) {
      if (this.success.hasOwnProperty(iter225)) {
        iter225 = this.success[iter225];
        iter225.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_mutateRow_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.mutations = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.mutations !== undefined && args.mutations !== null) {
      this.mutations = Thrift.copyList(args.mutations, [ttypes.Mutation]);
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
  }
};
Hbase_mutateRow_args.prototype = {};
Hbase_mutateRow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.mutations = [];
        var _rtmp3227 = input.readListBegin();
        var _size226 = _rtmp3227.size || 0;
        for (var _i228 = 0; _i228 < _size226; ++_i228) {
          var elem229 = null;
          elem229 = new ttypes.Mutation();
          elem229.read(input);
          this.mutations.push(elem229);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.attributes = {};
        var _rtmp3231 = input.readMapBegin();
        var _size230 = _rtmp3231.size || 0;
        for (var _i232 = 0; _i232 < _size230; ++_i232) {
          var key233 = null;
          var val234 = null;
          key233 = input.readBinary();
          val234 = input.readBinary();
          this.attributes[key233] = val234;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRow_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRow_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.mutations !== null && this.mutations !== undefined) {
    output.writeFieldBegin('mutations', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.mutations.length);
    for (var iter235 in this.mutations) {
      if (this.mutations.hasOwnProperty(iter235)) {
        iter235 = this.mutations[iter235];
        iter235.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter236 in this.attributes) {
      if (this.attributes.hasOwnProperty(kiter236)) {
        var viter237 = this.attributes[kiter236];
        output.writeBinary(kiter236);
        output.writeBinary(viter237);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_mutateRow_result = function(args) {
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
    if (args.ia !== undefined && args.ia !== null) {
      this.ia = args.ia;
    }
  }
};
Hbase_mutateRow_result.prototype = {};
Hbase_mutateRow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRow_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRow_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_mutateRowTs_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.mutations = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.mutations !== undefined && args.mutations !== null) {
      this.mutations = Thrift.copyList(args.mutations, [ttypes.Mutation]);
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
  }
};
Hbase_mutateRowTs_args.prototype = {};
Hbase_mutateRowTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.mutations = [];
        var _rtmp3239 = input.readListBegin();
        var _size238 = _rtmp3239.size || 0;
        for (var _i240 = 0; _i240 < _size238; ++_i240) {
          var elem241 = null;
          elem241 = new ttypes.Mutation();
          elem241.read(input);
          this.mutations.push(elem241);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        this.attributes = {};
        var _rtmp3243 = input.readMapBegin();
        var _size242 = _rtmp3243.size || 0;
        for (var _i244 = 0; _i244 < _size242; ++_i244) {
          var key245 = null;
          var val246 = null;
          key245 = input.readBinary();
          val246 = input.readBinary();
          this.attributes[key245] = val246;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRowTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRowTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.mutations !== null && this.mutations !== undefined) {
    output.writeFieldBegin('mutations', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.mutations.length);
    for (var iter247 in this.mutations) {
      if (this.mutations.hasOwnProperty(iter247)) {
        iter247 = this.mutations[iter247];
        iter247.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter248 in this.attributes) {
      if (this.attributes.hasOwnProperty(kiter248)) {
        var viter249 = this.attributes[kiter248];
        output.writeBinary(kiter248);
        output.writeBinary(viter249);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_mutateRowTs_result = function(args) {
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
    if (args.ia !== undefined && args.ia !== null) {
      this.ia = args.ia;
    }
  }
};
Hbase_mutateRowTs_result.prototype = {};
Hbase_mutateRowTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRowTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRowTs_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_mutateRows_args = function(args) {
  this.tableName = null;
  this.rowBatches = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.rowBatches !== undefined && args.rowBatches !== null) {
      this.rowBatches = Thrift.copyList(args.rowBatches, [ttypes.BatchMutation]);
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
  }
};
Hbase_mutateRows_args.prototype = {};
Hbase_mutateRows_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.rowBatches = [];
        var _rtmp3251 = input.readListBegin();
        var _size250 = _rtmp3251.size || 0;
        for (var _i252 = 0; _i252 < _size250; ++_i252) {
          var elem253 = null;
          elem253 = new ttypes.BatchMutation();
          elem253.read(input);
          this.rowBatches.push(elem253);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        this.attributes = {};
        var _rtmp3255 = input.readMapBegin();
        var _size254 = _rtmp3255.size || 0;
        for (var _i256 = 0; _i256 < _size254; ++_i256) {
          var key257 = null;
          var val258 = null;
          key257 = input.readBinary();
          val258 = input.readBinary();
          this.attributes[key257] = val258;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRows_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRows_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.rowBatches !== null && this.rowBatches !== undefined) {
    output.writeFieldBegin('rowBatches', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.rowBatches.length);
    for (var iter259 in this.rowBatches) {
      if (this.rowBatches.hasOwnProperty(iter259)) {
        iter259 = this.rowBatches[iter259];
        iter259.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter260 in this.attributes) {
      if (this.attributes.hasOwnProperty(kiter260)) {
        var viter261 = this.attributes[kiter260];
        output.writeBinary(kiter260);
        output.writeBinary(viter261);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_mutateRows_result = function(args) {
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
    if (args.ia !== undefined && args.ia !== null) {
      this.ia = args.ia;
    }
  }
};
Hbase_mutateRows_result.prototype = {};
Hbase_mutateRows_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRows_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRows_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_mutateRowsTs_args = function(args) {
  this.tableName = null;
  this.rowBatches = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.rowBatches !== undefined && args.rowBatches !== null) {
      this.rowBatches = Thrift.copyList(args.rowBatches, [ttypes.BatchMutation]);
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
  }
};
Hbase_mutateRowsTs_args.prototype = {};
Hbase_mutateRowsTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.rowBatches = [];
        var _rtmp3263 = input.readListBegin();
        var _size262 = _rtmp3263.size || 0;
        for (var _i264 = 0; _i264 < _size262; ++_i264) {
          var elem265 = null;
          elem265 = new ttypes.BatchMutation();
          elem265.read(input);
          this.rowBatches.push(elem265);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.attributes = {};
        var _rtmp3267 = input.readMapBegin();
        var _size266 = _rtmp3267.size || 0;
        for (var _i268 = 0; _i268 < _size266; ++_i268) {
          var key269 = null;
          var val270 = null;
          key269 = input.readBinary();
          val270 = input.readBinary();
          this.attributes[key269] = val270;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRowsTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRowsTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.rowBatches !== null && this.rowBatches !== undefined) {
    output.writeFieldBegin('rowBatches', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.rowBatches.length);
    for (var iter271 in this.rowBatches) {
      if (this.rowBatches.hasOwnProperty(iter271)) {
        iter271 = this.rowBatches[iter271];
        iter271.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter272 in this.attributes) {
      if (this.attributes.hasOwnProperty(kiter272)) {
        var viter273 = this.attributes[kiter272];
        output.writeBinary(kiter272);
        output.writeBinary(viter273);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_mutateRowsTs_result = function(args) {
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
    if (args.ia !== undefined && args.ia !== null) {
      this.ia = args.ia;
    }
  }
};
Hbase_mutateRowsTs_result.prototype = {};
Hbase_mutateRowsTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRowsTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRowsTs_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_atomicIncrement_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.column = null;
  this.value = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.column !== undefined && args.column !== null) {
      this.column = args.column;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
Hbase_atomicIncrement_args.prototype = {};
Hbase_atomicIncrement_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.value = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_atomicIncrement_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_atomicIncrement_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3);
    output.writeBinary(this.column);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.I64, 4);
    output.writeI64(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_atomicIncrement_result = function(args) {
  this.success = null;
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
    if (args.ia !== undefined && args.ia !== null) {
      this.ia = args.ia;
    }
  }
};
Hbase_atomicIncrement_result.prototype = {};
Hbase_atomicIncrement_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_atomicIncrement_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_atomicIncrement_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_deleteAll_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.column = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.column !== undefined && args.column !== null) {
      this.column = args.column;
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
  }
};
Hbase_deleteAll_args.prototype = {};
Hbase_deleteAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.attributes = {};
        var _rtmp3275 = input.readMapBegin();
        var _size274 = _rtmp3275.size || 0;
        for (var _i276 = 0; _i276 < _size274; ++_i276) {
          var key277 = null;
          var val278 = null;
          key277 = input.readBinary();
          val278 = input.readBinary();
          this.attributes[key277] = val278;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAll_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAll_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3);
    output.writeBinary(this.column);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter279 in this.attributes) {
      if (this.attributes.hasOwnProperty(kiter279)) {
        var viter280 = this.attributes[kiter279];
        output.writeBinary(kiter279);
        output.writeBinary(viter280);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_deleteAll_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
Hbase_deleteAll_result.prototype = {};
Hbase_deleteAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAll_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAll_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_deleteAllTs_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.column = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.column !== undefined && args.column !== null) {
      this.column = args.column;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
  }
};
Hbase_deleteAllTs_args.prototype = {};
Hbase_deleteAllTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        this.attributes = {};
        var _rtmp3282 = input.readMapBegin();
        var _size281 = _rtmp3282.size || 0;
        for (var _i283 = 0; _i283 < _size281; ++_i283) {
          var key284 = null;
          var val285 = null;
          key284 = input.readBinary();
          val285 = input.readBinary();
          this.attributes[key284] = val285;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAllTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAllTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3);
    output.writeBinary(this.column);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter286 in this.attributes) {
      if (this.attributes.hasOwnProperty(kiter286)) {
        var viter287 = this.attributes[kiter286];
        output.writeBinary(kiter286);
        output.writeBinary(viter287);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_deleteAllTs_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
Hbase_deleteAllTs_result.prototype = {};
Hbase_deleteAllTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAllTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAllTs_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_deleteAllRow_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
  }
};
Hbase_deleteAllRow_args.prototype = {};
Hbase_deleteAllRow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        this.attributes = {};
        var _rtmp3289 = input.readMapBegin();
        var _size288 = _rtmp3289.size || 0;
        for (var _i290 = 0; _i290 < _size288; ++_i290) {
          var key291 = null;
          var val292 = null;
          key291 = input.readBinary();
          val292 = input.readBinary();
          this.attributes[key291] = val292;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAllRow_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAllRow_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter293 in this.attributes) {
      if (this.attributes.hasOwnProperty(kiter293)) {
        var viter294 = this.attributes[kiter293];
        output.writeBinary(kiter293);
        output.writeBinary(viter294);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_deleteAllRow_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
Hbase_deleteAllRow_result.prototype = {};
Hbase_deleteAllRow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAllRow_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAllRow_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_increment_args = function(args) {
  this.increment = null;
  if (args) {
    if (args.increment !== undefined && args.increment !== null) {
      this.increment = new ttypes.TIncrement(args.increment);
    }
  }
};
Hbase_increment_args.prototype = {};
Hbase_increment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.increment = new ttypes.TIncrement();
        this.increment.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_increment_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_increment_args');
  if (this.increment !== null && this.increment !== undefined) {
    output.writeFieldBegin('increment', Thrift.Type.STRUCT, 1);
    this.increment.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_increment_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
Hbase_increment_result.prototype = {};
Hbase_increment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_increment_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_increment_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_incrementRows_args = function(args) {
  this.increments = null;
  if (args) {
    if (args.increments !== undefined && args.increments !== null) {
      this.increments = Thrift.copyList(args.increments, [ttypes.TIncrement]);
    }
  }
};
Hbase_incrementRows_args.prototype = {};
Hbase_incrementRows_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.increments = [];
        var _rtmp3296 = input.readListBegin();
        var _size295 = _rtmp3296.size || 0;
        for (var _i297 = 0; _i297 < _size295; ++_i297) {
          var elem298 = null;
          elem298 = new ttypes.TIncrement();
          elem298.read(input);
          this.increments.push(elem298);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_incrementRows_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_incrementRows_args');
  if (this.increments !== null && this.increments !== undefined) {
    output.writeFieldBegin('increments', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.increments.length);
    for (var iter299 in this.increments) {
      if (this.increments.hasOwnProperty(iter299)) {
        iter299 = this.increments[iter299];
        iter299.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_incrementRows_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
Hbase_incrementRows_result.prototype = {};
Hbase_incrementRows_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_incrementRows_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_incrementRows_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_deleteAllRowTs_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
  }
};
Hbase_deleteAllRowTs_args.prototype = {};
Hbase_deleteAllRowTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.attributes = {};
        var _rtmp3301 = input.readMapBegin();
        var _size300 = _rtmp3301.size || 0;
        for (var _i302 = 0; _i302 < _size300; ++_i302) {
          var key303 = null;
          var val304 = null;
          key303 = input.readBinary();
          val304 = input.readBinary();
          this.attributes[key303] = val304;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAllRowTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAllRowTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter305 in this.attributes) {
      if (this.attributes.hasOwnProperty(kiter305)) {
        var viter306 = this.attributes[kiter305];
        output.writeBinary(kiter305);
        output.writeBinary(viter306);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_deleteAllRowTs_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
Hbase_deleteAllRowTs_result.prototype = {};
Hbase_deleteAllRowTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAllRowTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAllRowTs_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_scannerOpenWithScan_args = function(args) {
  this.tableName = null;
  this.scan = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.scan !== undefined && args.scan !== null) {
      this.scan = new ttypes.TScan(args.scan);
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
  }
};
Hbase_scannerOpenWithScan_args.prototype = {};
Hbase_scannerOpenWithScan_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.scan = new ttypes.TScan();
        this.scan.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        this.attributes = {};
        var _rtmp3308 = input.readMapBegin();
        var _size307 = _rtmp3308.size || 0;
        for (var _i309 = 0; _i309 < _size307; ++_i309) {
          var key310 = null;
          var val311 = null;
          key310 = input.readBinary();
          val311 = input.readBinary();
          this.attributes[key310] = val311;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithScan_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithScan_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.scan !== null && this.scan !== undefined) {
    output.writeFieldBegin('scan', Thrift.Type.STRUCT, 2);
    this.scan.write(output);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter312 in this.attributes) {
      if (this.attributes.hasOwnProperty(kiter312)) {
        var viter313 = this.attributes[kiter312];
        output.writeBinary(kiter312);
        output.writeBinary(viter313);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_scannerOpenWithScan_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
Hbase_scannerOpenWithScan_result.prototype = {};
Hbase_scannerOpenWithScan_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithScan_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithScan_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_scannerOpen_args = function(args) {
  this.tableName = null;
  this.startRow = null;
  this.columns = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.startRow !== undefined && args.startRow !== null) {
      this.startRow = args.startRow;
    }
    if (args.columns !== undefined && args.columns !== null) {
      this.columns = Thrift.copyList(args.columns, [null]);
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
  }
};
Hbase_scannerOpen_args.prototype = {};
Hbase_scannerOpen_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.startRow = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.columns = [];
        var _rtmp3315 = input.readListBegin();
        var _size314 = _rtmp3315.size || 0;
        for (var _i316 = 0; _i316 < _size314; ++_i316) {
          var elem317 = null;
          elem317 = input.readBinary();
          this.columns.push(elem317);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.attributes = {};
        var _rtmp3319 = input.readMapBegin();
        var _size318 = _rtmp3319.size || 0;
        for (var _i320 = 0; _i320 < _size318; ++_i320) {
          var key321 = null;
          var val322 = null;
          key321 = input.readBinary();
          val322 = input.readBinary();
          this.attributes[key321] = val322;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpen_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpen_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.STRING, 2);
    output.writeBinary(this.startRow);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter323 in this.columns) {
      if (this.columns.hasOwnProperty(iter323)) {
        iter323 = this.columns[iter323];
        output.writeBinary(iter323);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter324 in this.attributes) {
      if (this.attributes.hasOwnProperty(kiter324)) {
        var viter325 = this.attributes[kiter324];
        output.writeBinary(kiter324);
        output.writeBinary(viter325);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_scannerOpen_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
Hbase_scannerOpen_result.prototype = {};
Hbase_scannerOpen_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpen_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpen_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_scannerOpenWithStop_args = function(args) {
  this.tableName = null;
  this.startRow = null;
  this.stopRow = null;
  this.columns = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.startRow !== undefined && args.startRow !== null) {
      this.startRow = args.startRow;
    }
    if (args.stopRow !== undefined && args.stopRow !== null) {
      this.stopRow = args.stopRow;
    }
    if (args.columns !== undefined && args.columns !== null) {
      this.columns = Thrift.copyList(args.columns, [null]);
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
  }
};
Hbase_scannerOpenWithStop_args.prototype = {};
Hbase_scannerOpenWithStop_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.startRow = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.stopRow = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.columns = [];
        var _rtmp3327 = input.readListBegin();
        var _size326 = _rtmp3327.size || 0;
        for (var _i328 = 0; _i328 < _size326; ++_i328) {
          var elem329 = null;
          elem329 = input.readBinary();
          this.columns.push(elem329);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        this.attributes = {};
        var _rtmp3331 = input.readMapBegin();
        var _size330 = _rtmp3331.size || 0;
        for (var _i332 = 0; _i332 < _size330; ++_i332) {
          var key333 = null;
          var val334 = null;
          key333 = input.readBinary();
          val334 = input.readBinary();
          this.attributes[key333] = val334;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithStop_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithStop_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.STRING, 2);
    output.writeBinary(this.startRow);
    output.writeFieldEnd();
  }
  if (this.stopRow !== null && this.stopRow !== undefined) {
    output.writeFieldBegin('stopRow', Thrift.Type.STRING, 3);
    output.writeBinary(this.stopRow);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter335 in this.columns) {
      if (this.columns.hasOwnProperty(iter335)) {
        iter335 = this.columns[iter335];
        output.writeBinary(iter335);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter336 in this.attributes) {
      if (this.attributes.hasOwnProperty(kiter336)) {
        var viter337 = this.attributes[kiter336];
        output.writeBinary(kiter336);
        output.writeBinary(viter337);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_scannerOpenWithStop_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
Hbase_scannerOpenWithStop_result.prototype = {};
Hbase_scannerOpenWithStop_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithStop_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithStop_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_scannerOpenWithPrefix_args = function(args) {
  this.tableName = null;
  this.startAndPrefix = null;
  this.columns = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.startAndPrefix !== undefined && args.startAndPrefix !== null) {
      this.startAndPrefix = args.startAndPrefix;
    }
    if (args.columns !== undefined && args.columns !== null) {
      this.columns = Thrift.copyList(args.columns, [null]);
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
  }
};
Hbase_scannerOpenWithPrefix_args.prototype = {};
Hbase_scannerOpenWithPrefix_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.startAndPrefix = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.columns = [];
        var _rtmp3339 = input.readListBegin();
        var _size338 = _rtmp3339.size || 0;
        for (var _i340 = 0; _i340 < _size338; ++_i340) {
          var elem341 = null;
          elem341 = input.readBinary();
          this.columns.push(elem341);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.attributes = {};
        var _rtmp3343 = input.readMapBegin();
        var _size342 = _rtmp3343.size || 0;
        for (var _i344 = 0; _i344 < _size342; ++_i344) {
          var key345 = null;
          var val346 = null;
          key345 = input.readBinary();
          val346 = input.readBinary();
          this.attributes[key345] = val346;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithPrefix_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithPrefix_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.startAndPrefix !== null && this.startAndPrefix !== undefined) {
    output.writeFieldBegin('startAndPrefix', Thrift.Type.STRING, 2);
    output.writeBinary(this.startAndPrefix);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter347 in this.columns) {
      if (this.columns.hasOwnProperty(iter347)) {
        iter347 = this.columns[iter347];
        output.writeBinary(iter347);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter348 in this.attributes) {
      if (this.attributes.hasOwnProperty(kiter348)) {
        var viter349 = this.attributes[kiter348];
        output.writeBinary(kiter348);
        output.writeBinary(viter349);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_scannerOpenWithPrefix_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
Hbase_scannerOpenWithPrefix_result.prototype = {};
Hbase_scannerOpenWithPrefix_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithPrefix_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithPrefix_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_scannerOpenTs_args = function(args) {
  this.tableName = null;
  this.startRow = null;
  this.columns = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.startRow !== undefined && args.startRow !== null) {
      this.startRow = args.startRow;
    }
    if (args.columns !== undefined && args.columns !== null) {
      this.columns = Thrift.copyList(args.columns, [null]);
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
  }
};
Hbase_scannerOpenTs_args.prototype = {};
Hbase_scannerOpenTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.startRow = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.columns = [];
        var _rtmp3351 = input.readListBegin();
        var _size350 = _rtmp3351.size || 0;
        for (var _i352 = 0; _i352 < _size350; ++_i352) {
          var elem353 = null;
          elem353 = input.readBinary();
          this.columns.push(elem353);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        this.attributes = {};
        var _rtmp3355 = input.readMapBegin();
        var _size354 = _rtmp3355.size || 0;
        for (var _i356 = 0; _i356 < _size354; ++_i356) {
          var key357 = null;
          var val358 = null;
          key357 = input.readBinary();
          val358 = input.readBinary();
          this.attributes[key357] = val358;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.STRING, 2);
    output.writeBinary(this.startRow);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter359 in this.columns) {
      if (this.columns.hasOwnProperty(iter359)) {
        iter359 = this.columns[iter359];
        output.writeBinary(iter359);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter360 in this.attributes) {
      if (this.attributes.hasOwnProperty(kiter360)) {
        var viter361 = this.attributes[kiter360];
        output.writeBinary(kiter360);
        output.writeBinary(viter361);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_scannerOpenTs_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
Hbase_scannerOpenTs_result.prototype = {};
Hbase_scannerOpenTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenTs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_scannerOpenWithStopTs_args = function(args) {
  this.tableName = null;
  this.startRow = null;
  this.stopRow = null;
  this.columns = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.startRow !== undefined && args.startRow !== null) {
      this.startRow = args.startRow;
    }
    if (args.stopRow !== undefined && args.stopRow !== null) {
      this.stopRow = args.stopRow;
    }
    if (args.columns !== undefined && args.columns !== null) {
      this.columns = Thrift.copyList(args.columns, [null]);
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
  }
};
Hbase_scannerOpenWithStopTs_args.prototype = {};
Hbase_scannerOpenWithStopTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.startRow = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.stopRow = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.columns = [];
        var _rtmp3363 = input.readListBegin();
        var _size362 = _rtmp3363.size || 0;
        for (var _i364 = 0; _i364 < _size362; ++_i364) {
          var elem365 = null;
          elem365 = input.readBinary();
          this.columns.push(elem365);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        this.attributes = {};
        var _rtmp3367 = input.readMapBegin();
        var _size366 = _rtmp3367.size || 0;
        for (var _i368 = 0; _i368 < _size366; ++_i368) {
          var key369 = null;
          var val370 = null;
          key369 = input.readBinary();
          val370 = input.readBinary();
          this.attributes[key369] = val370;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithStopTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithStopTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.STRING, 2);
    output.writeBinary(this.startRow);
    output.writeFieldEnd();
  }
  if (this.stopRow !== null && this.stopRow !== undefined) {
    output.writeFieldBegin('stopRow', Thrift.Type.STRING, 3);
    output.writeBinary(this.stopRow);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter371 in this.columns) {
      if (this.columns.hasOwnProperty(iter371)) {
        iter371 = this.columns[iter371];
        output.writeBinary(iter371);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 5);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter372 in this.attributes) {
      if (this.attributes.hasOwnProperty(kiter372)) {
        var viter373 = this.attributes[kiter372];
        output.writeBinary(kiter372);
        output.writeBinary(viter373);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_scannerOpenWithStopTs_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
Hbase_scannerOpenWithStopTs_result.prototype = {};
Hbase_scannerOpenWithStopTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithStopTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithStopTs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_scannerGet_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
Hbase_scannerGet_args.prototype = {};
Hbase_scannerGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerGet_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerGet_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_scannerGet_result = function(args) {
  this.success = null;
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TRowResult]);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
    if (args.ia !== undefined && args.ia !== null) {
      this.ia = args.ia;
    }
  }
};
Hbase_scannerGet_result.prototype = {};
Hbase_scannerGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3375 = input.readListBegin();
        var _size374 = _rtmp3375.size || 0;
        for (var _i376 = 0; _i376 < _size374; ++_i376) {
          var elem377 = null;
          elem377 = new ttypes.TRowResult();
          elem377.read(input);
          this.success.push(elem377);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerGet_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter378 in this.success) {
      if (this.success.hasOwnProperty(iter378)) {
        iter378 = this.success[iter378];
        iter378.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_scannerGetList_args = function(args) {
  this.id = null;
  this.nbRows = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.nbRows !== undefined && args.nbRows !== null) {
      this.nbRows = args.nbRows;
    }
  }
};
Hbase_scannerGetList_args.prototype = {};
Hbase_scannerGetList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.nbRows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerGetList_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerGetList_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.nbRows !== null && this.nbRows !== undefined) {
    output.writeFieldBegin('nbRows', Thrift.Type.I32, 2);
    output.writeI32(this.nbRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_scannerGetList_result = function(args) {
  this.success = null;
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TRowResult]);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
    if (args.ia !== undefined && args.ia !== null) {
      this.ia = args.ia;
    }
  }
};
Hbase_scannerGetList_result.prototype = {};
Hbase_scannerGetList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3380 = input.readListBegin();
        var _size379 = _rtmp3380.size || 0;
        for (var _i381 = 0; _i381 < _size379; ++_i381) {
          var elem382 = null;
          elem382 = new ttypes.TRowResult();
          elem382.read(input);
          this.success.push(elem382);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerGetList_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerGetList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter383 in this.success) {
      if (this.success.hasOwnProperty(iter383)) {
        iter383 = this.success[iter383];
        iter383.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_scannerClose_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
Hbase_scannerClose_args.prototype = {};
Hbase_scannerClose_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerClose_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerClose_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_scannerClose_result = function(args) {
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
    if (args.ia !== undefined && args.ia !== null) {
      this.ia = args.ia;
    }
  }
};
Hbase_scannerClose_result.prototype = {};
Hbase_scannerClose_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerClose_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerClose_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getRowOrBefore_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.family = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.family !== undefined && args.family !== null) {
      this.family = args.family;
    }
  }
};
Hbase_getRowOrBefore_args.prototype = {};
Hbase_getRowOrBefore_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.family = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowOrBefore_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowOrBefore_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.family !== null && this.family !== undefined) {
    output.writeFieldBegin('family', Thrift.Type.STRING, 3);
    output.writeBinary(this.family);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getRowOrBefore_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TCell]);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
Hbase_getRowOrBefore_result.prototype = {};
Hbase_getRowOrBefore_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3385 = input.readListBegin();
        var _size384 = _rtmp3385.size || 0;
        for (var _i386 = 0; _i386 < _size384; ++_i386) {
          var elem387 = null;
          elem387 = new ttypes.TCell();
          elem387.read(input);
          this.success.push(elem387);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowOrBefore_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowOrBefore_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter388 in this.success) {
      if (this.success.hasOwnProperty(iter388)) {
        iter388 = this.success[iter388];
        iter388.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getRegionInfo_args = function(args) {
  this.row = null;
  if (args) {
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
  }
};
Hbase_getRegionInfo_args.prototype = {};
Hbase_getRegionInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRegionInfo_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRegionInfo_args');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 1);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getRegionInfo_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TRegionInfo(args.success);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
Hbase_getRegionInfo_result.prototype = {};
Hbase_getRegionInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TRegionInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRegionInfo_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRegionInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_append_args = function(args) {
  this.append = null;
  if (args) {
    if (args.append !== undefined && args.append !== null) {
      this.append = new ttypes.TAppend(args.append);
    }
  }
};
Hbase_append_args.prototype = {};
Hbase_append_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.append = new ttypes.TAppend();
        this.append.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_append_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_append_args');
  if (this.append !== null && this.append !== undefined) {
    output.writeFieldBegin('append', Thrift.Type.STRUCT, 1);
    this.append.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_append_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TCell]);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
Hbase_append_result.prototype = {};
Hbase_append_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3390 = input.readListBegin();
        var _size389 = _rtmp3390.size || 0;
        for (var _i391 = 0; _i391 < _size389; ++_i391) {
          var elem392 = null;
          elem392 = new ttypes.TCell();
          elem392.read(input);
          this.success.push(elem392);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_append_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_append_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter393 in this.success) {
      if (this.success.hasOwnProperty(iter393)) {
        iter393 = this.success[iter393];
        iter393.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_checkAndPut_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.column = null;
  this.value = null;
  this.mput = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.column !== undefined && args.column !== null) {
      this.column = args.column;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.mput !== undefined && args.mput !== null) {
      this.mput = new ttypes.Mutation(args.mput);
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
  }
};
Hbase_checkAndPut_args.prototype = {};
Hbase_checkAndPut_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.mput = new ttypes.Mutation();
        this.mput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        this.attributes = {};
        var _rtmp3395 = input.readMapBegin();
        var _size394 = _rtmp3395.size || 0;
        for (var _i396 = 0; _i396 < _size394; ++_i396) {
          var key397 = null;
          var val398 = null;
          key397 = input.readBinary();
          val398 = input.readBinary();
          this.attributes[key397] = val398;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_checkAndPut_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_checkAndPut_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3);
    output.writeBinary(this.column);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 5);
    output.writeBinary(this.value);
    output.writeFieldEnd();
  }
  if (this.mput !== null && this.mput !== undefined) {
    output.writeFieldBegin('mput', Thrift.Type.STRUCT, 6);
    this.mput.write(output);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter399 in this.attributes) {
      if (this.attributes.hasOwnProperty(kiter399)) {
        var viter400 = this.attributes[kiter399];
        output.writeBinary(kiter399);
        output.writeBinary(viter400);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_checkAndPut_result = function(args) {
  this.success = null;
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
    if (args.ia !== undefined && args.ia !== null) {
      this.ia = args.ia;
    }
  }
};
Hbase_checkAndPut_result.prototype = {};
Hbase_checkAndPut_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_checkAndPut_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_checkAndPut_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var HbaseClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
HbaseClient.prototype = {};
HbaseClient.prototype.seqid = function() { return this._seqid; };
HbaseClient.prototype.new_seqid = function() { return this._seqid += 1; };

HbaseClient.prototype.enableTable = function(tableName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_enableTable(tableName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_enableTable(tableName);
  }
};

HbaseClient.prototype.send_enableTable = function(tableName) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName
  };
  var args = new Hbase_enableTable_args(params);
  try {
    output.writeMessageBegin('enableTable', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_enableTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_enableTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null);
};

HbaseClient.prototype.disableTable = function(tableName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_disableTable(tableName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_disableTable(tableName);
  }
};

HbaseClient.prototype.send_disableTable = function(tableName) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName
  };
  var args = new Hbase_disableTable_args(params);
  try {
    output.writeMessageBegin('disableTable', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_disableTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_disableTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null);
};

HbaseClient.prototype.isTableEnabled = function(tableName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isTableEnabled(tableName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isTableEnabled(tableName);
  }
};

HbaseClient.prototype.send_isTableEnabled = function(tableName) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName
  };
  var args = new Hbase_isTableEnabled_args(params);
  try {
    output.writeMessageBegin('isTableEnabled', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_isTableEnabled = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_isTableEnabled_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isTableEnabled failed: unknown result');
};

HbaseClient.prototype.compact = function(tableNameOrRegionName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_compact(tableNameOrRegionName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_compact(tableNameOrRegionName);
  }
};

HbaseClient.prototype.send_compact = function(tableNameOrRegionName) {
  var output = new this.pClass(this.output);
  var params = {
    tableNameOrRegionName: tableNameOrRegionName
  };
  var args = new Hbase_compact_args(params);
  try {
    output.writeMessageBegin('compact', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_compact = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_compact_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null);
};

HbaseClient.prototype.majorCompact = function(tableNameOrRegionName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_majorCompact(tableNameOrRegionName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_majorCompact(tableNameOrRegionName);
  }
};

HbaseClient.prototype.send_majorCompact = function(tableNameOrRegionName) {
  var output = new this.pClass(this.output);
  var params = {
    tableNameOrRegionName: tableNameOrRegionName
  };
  var args = new Hbase_majorCompact_args(params);
  try {
    output.writeMessageBegin('majorCompact', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_majorCompact = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_majorCompact_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null);
};

HbaseClient.prototype.getTableNames = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTableNames();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTableNames();
  }
};

HbaseClient.prototype.send_getTableNames = function() {
  var output = new this.pClass(this.output);
  var args = new Hbase_getTableNames_args();
  try {
    output.writeMessageBegin('getTableNames', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_getTableNames = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getTableNames_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTableNames failed: unknown result');
};

HbaseClient.prototype.getColumnDescriptors = function(tableName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getColumnDescriptors(tableName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getColumnDescriptors(tableName);
  }
};

HbaseClient.prototype.send_getColumnDescriptors = function(tableName) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName
  };
  var args = new Hbase_getColumnDescriptors_args(params);
  try {
    output.writeMessageBegin('getColumnDescriptors', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_getColumnDescriptors = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getColumnDescriptors_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getColumnDescriptors failed: unknown result');
};

HbaseClient.prototype.getTableRegions = function(tableName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTableRegions(tableName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTableRegions(tableName);
  }
};

HbaseClient.prototype.send_getTableRegions = function(tableName) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName
  };
  var args = new Hbase_getTableRegions_args(params);
  try {
    output.writeMessageBegin('getTableRegions', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_getTableRegions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getTableRegions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTableRegions failed: unknown result');
};

HbaseClient.prototype.createTable = function(tableName, columnFamilies, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createTable(tableName, columnFamilies);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createTable(tableName, columnFamilies);
  }
};

HbaseClient.prototype.send_createTable = function(tableName, columnFamilies) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    columnFamilies: columnFamilies
  };
  var args = new Hbase_createTable_args(params);
  try {
    output.writeMessageBegin('createTable', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_createTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_createTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  if (null !== result.exist) {
    return callback(result.exist);
  }
  callback(null);
};

HbaseClient.prototype.deleteTable = function(tableName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteTable(tableName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteTable(tableName);
  }
};

HbaseClient.prototype.send_deleteTable = function(tableName) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName
  };
  var args = new Hbase_deleteTable_args(params);
  try {
    output.writeMessageBegin('deleteTable', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_deleteTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_deleteTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null);
};

HbaseClient.prototype.get = function(tableName, row, column, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get(tableName, row, column, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get(tableName, row, column, attributes);
  }
};

HbaseClient.prototype.send_get = function(tableName, row, column, attributes) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    row: row,
    column: column,
    attributes: attributes
  };
  var args = new Hbase_get_args(params);
  try {
    output.writeMessageBegin('get', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_get = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_get_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get failed: unknown result');
};

HbaseClient.prototype.getVer = function(tableName, row, column, numVersions, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getVer(tableName, row, column, numVersions, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getVer(tableName, row, column, numVersions, attributes);
  }
};

HbaseClient.prototype.send_getVer = function(tableName, row, column, numVersions, attributes) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    row: row,
    column: column,
    numVersions: numVersions,
    attributes: attributes
  };
  var args = new Hbase_getVer_args(params);
  try {
    output.writeMessageBegin('getVer', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_getVer = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getVer_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getVer failed: unknown result');
};

HbaseClient.prototype.getVerTs = function(tableName, row, column, timestamp, numVersions, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getVerTs(tableName, row, column, timestamp, numVersions, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getVerTs(tableName, row, column, timestamp, numVersions, attributes);
  }
};

HbaseClient.prototype.send_getVerTs = function(tableName, row, column, timestamp, numVersions, attributes) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    row: row,
    column: column,
    timestamp: timestamp,
    numVersions: numVersions,
    attributes: attributes
  };
  var args = new Hbase_getVerTs_args(params);
  try {
    output.writeMessageBegin('getVerTs', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_getVerTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getVerTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getVerTs failed: unknown result');
};

HbaseClient.prototype.getRow = function(tableName, row, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRow(tableName, row, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRow(tableName, row, attributes);
  }
};

HbaseClient.prototype.send_getRow = function(tableName, row, attributes) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    row: row,
    attributes: attributes
  };
  var args = new Hbase_getRow_args(params);
  try {
    output.writeMessageBegin('getRow', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_getRow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRow failed: unknown result');
};

HbaseClient.prototype.getRowWithColumns = function(tableName, row, columns, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRowWithColumns(tableName, row, columns, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRowWithColumns(tableName, row, columns, attributes);
  }
};

HbaseClient.prototype.send_getRowWithColumns = function(tableName, row, columns, attributes) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    row: row,
    columns: columns,
    attributes: attributes
  };
  var args = new Hbase_getRowWithColumns_args(params);
  try {
    output.writeMessageBegin('getRowWithColumns', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_getRowWithColumns = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRowWithColumns_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRowWithColumns failed: unknown result');
};

HbaseClient.prototype.getRowTs = function(tableName, row, timestamp, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRowTs(tableName, row, timestamp, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRowTs(tableName, row, timestamp, attributes);
  }
};

HbaseClient.prototype.send_getRowTs = function(tableName, row, timestamp, attributes) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    row: row,
    timestamp: timestamp,
    attributes: attributes
  };
  var args = new Hbase_getRowTs_args(params);
  try {
    output.writeMessageBegin('getRowTs', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_getRowTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRowTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRowTs failed: unknown result');
};

HbaseClient.prototype.getRowWithColumnsTs = function(tableName, row, columns, timestamp, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRowWithColumnsTs(tableName, row, columns, timestamp, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRowWithColumnsTs(tableName, row, columns, timestamp, attributes);
  }
};

HbaseClient.prototype.send_getRowWithColumnsTs = function(tableName, row, columns, timestamp, attributes) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    row: row,
    columns: columns,
    timestamp: timestamp,
    attributes: attributes
  };
  var args = new Hbase_getRowWithColumnsTs_args(params);
  try {
    output.writeMessageBegin('getRowWithColumnsTs', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_getRowWithColumnsTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRowWithColumnsTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRowWithColumnsTs failed: unknown result');
};

HbaseClient.prototype.getRows = function(tableName, rows, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRows(tableName, rows, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRows(tableName, rows, attributes);
  }
};

HbaseClient.prototype.send_getRows = function(tableName, rows, attributes) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    rows: rows,
    attributes: attributes
  };
  var args = new Hbase_getRows_args(params);
  try {
    output.writeMessageBegin('getRows', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_getRows = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRows_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRows failed: unknown result');
};

HbaseClient.prototype.getRowsWithColumns = function(tableName, rows, columns, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRowsWithColumns(tableName, rows, columns, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRowsWithColumns(tableName, rows, columns, attributes);
  }
};

HbaseClient.prototype.send_getRowsWithColumns = function(tableName, rows, columns, attributes) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    rows: rows,
    columns: columns,
    attributes: attributes
  };
  var args = new Hbase_getRowsWithColumns_args(params);
  try {
    output.writeMessageBegin('getRowsWithColumns', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_getRowsWithColumns = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRowsWithColumns_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRowsWithColumns failed: unknown result');
};

HbaseClient.prototype.getRowsTs = function(tableName, rows, timestamp, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRowsTs(tableName, rows, timestamp, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRowsTs(tableName, rows, timestamp, attributes);
  }
};

HbaseClient.prototype.send_getRowsTs = function(tableName, rows, timestamp, attributes) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    rows: rows,
    timestamp: timestamp,
    attributes: attributes
  };
  var args = new Hbase_getRowsTs_args(params);
  try {
    output.writeMessageBegin('getRowsTs', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_getRowsTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRowsTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRowsTs failed: unknown result');
};

HbaseClient.prototype.getRowsWithColumnsTs = function(tableName, rows, columns, timestamp, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRowsWithColumnsTs(tableName, rows, columns, timestamp, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRowsWithColumnsTs(tableName, rows, columns, timestamp, attributes);
  }
};

HbaseClient.prototype.send_getRowsWithColumnsTs = function(tableName, rows, columns, timestamp, attributes) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    rows: rows,
    columns: columns,
    timestamp: timestamp,
    attributes: attributes
  };
  var args = new Hbase_getRowsWithColumnsTs_args(params);
  try {
    output.writeMessageBegin('getRowsWithColumnsTs', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_getRowsWithColumnsTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRowsWithColumnsTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRowsWithColumnsTs failed: unknown result');
};

HbaseClient.prototype.mutateRow = function(tableName, row, mutations, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_mutateRow(tableName, row, mutations, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_mutateRow(tableName, row, mutations, attributes);
  }
};

HbaseClient.prototype.send_mutateRow = function(tableName, row, mutations, attributes) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    row: row,
    mutations: mutations,
    attributes: attributes
  };
  var args = new Hbase_mutateRow_args(params);
  try {
    output.writeMessageBegin('mutateRow', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_mutateRow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_mutateRow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  callback(null);
};

HbaseClient.prototype.mutateRowTs = function(tableName, row, mutations, timestamp, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_mutateRowTs(tableName, row, mutations, timestamp, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_mutateRowTs(tableName, row, mutations, timestamp, attributes);
  }
};

HbaseClient.prototype.send_mutateRowTs = function(tableName, row, mutations, timestamp, attributes) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    row: row,
    mutations: mutations,
    timestamp: timestamp,
    attributes: attributes
  };
  var args = new Hbase_mutateRowTs_args(params);
  try {
    output.writeMessageBegin('mutateRowTs', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_mutateRowTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_mutateRowTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  callback(null);
};

HbaseClient.prototype.mutateRows = function(tableName, rowBatches, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_mutateRows(tableName, rowBatches, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_mutateRows(tableName, rowBatches, attributes);
  }
};

HbaseClient.prototype.send_mutateRows = function(tableName, rowBatches, attributes) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    rowBatches: rowBatches,
    attributes: attributes
  };
  var args = new Hbase_mutateRows_args(params);
  try {
    output.writeMessageBegin('mutateRows', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_mutateRows = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_mutateRows_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  callback(null);
};

HbaseClient.prototype.mutateRowsTs = function(tableName, rowBatches, timestamp, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_mutateRowsTs(tableName, rowBatches, timestamp, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_mutateRowsTs(tableName, rowBatches, timestamp, attributes);
  }
};

HbaseClient.prototype.send_mutateRowsTs = function(tableName, rowBatches, timestamp, attributes) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    rowBatches: rowBatches,
    timestamp: timestamp,
    attributes: attributes
  };
  var args = new Hbase_mutateRowsTs_args(params);
  try {
    output.writeMessageBegin('mutateRowsTs', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_mutateRowsTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_mutateRowsTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  callback(null);
};

HbaseClient.prototype.atomicIncrement = function(tableName, row, column, value, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_atomicIncrement(tableName, row, column, value);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_atomicIncrement(tableName, row, column, value);
  }
};

HbaseClient.prototype.send_atomicIncrement = function(tableName, row, column, value) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    row: row,
    column: column,
    value: value
  };
  var args = new Hbase_atomicIncrement_args(params);
  try {
    output.writeMessageBegin('atomicIncrement', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_atomicIncrement = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_atomicIncrement_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('atomicIncrement failed: unknown result');
};

HbaseClient.prototype.deleteAll = function(tableName, row, column, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteAll(tableName, row, column, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteAll(tableName, row, column, attributes);
  }
};

HbaseClient.prototype.send_deleteAll = function(tableName, row, column, attributes) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    row: row,
    column: column,
    attributes: attributes
  };
  var args = new Hbase_deleteAll_args(params);
  try {
    output.writeMessageBegin('deleteAll', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_deleteAll = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_deleteAll_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null);
};

HbaseClient.prototype.deleteAllTs = function(tableName, row, column, timestamp, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteAllTs(tableName, row, column, timestamp, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteAllTs(tableName, row, column, timestamp, attributes);
  }
};

HbaseClient.prototype.send_deleteAllTs = function(tableName, row, column, timestamp, attributes) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    row: row,
    column: column,
    timestamp: timestamp,
    attributes: attributes
  };
  var args = new Hbase_deleteAllTs_args(params);
  try {
    output.writeMessageBegin('deleteAllTs', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_deleteAllTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_deleteAllTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null);
};

HbaseClient.prototype.deleteAllRow = function(tableName, row, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteAllRow(tableName, row, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteAllRow(tableName, row, attributes);
  }
};

HbaseClient.prototype.send_deleteAllRow = function(tableName, row, attributes) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    row: row,
    attributes: attributes
  };
  var args = new Hbase_deleteAllRow_args(params);
  try {
    output.writeMessageBegin('deleteAllRow', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_deleteAllRow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_deleteAllRow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null);
};

HbaseClient.prototype.increment = function(increment, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_increment(increment);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_increment(increment);
  }
};

HbaseClient.prototype.send_increment = function(increment) {
  var output = new this.pClass(this.output);
  var params = {
    increment: increment
  };
  var args = new Hbase_increment_args(params);
  try {
    output.writeMessageBegin('increment', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_increment = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_increment_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null);
};

HbaseClient.prototype.incrementRows = function(increments, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_incrementRows(increments);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_incrementRows(increments);
  }
};

HbaseClient.prototype.send_incrementRows = function(increments) {
  var output = new this.pClass(this.output);
  var params = {
    increments: increments
  };
  var args = new Hbase_incrementRows_args(params);
  try {
    output.writeMessageBegin('incrementRows', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_incrementRows = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_incrementRows_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null);
};

HbaseClient.prototype.deleteAllRowTs = function(tableName, row, timestamp, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteAllRowTs(tableName, row, timestamp, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteAllRowTs(tableName, row, timestamp, attributes);
  }
};

HbaseClient.prototype.send_deleteAllRowTs = function(tableName, row, timestamp, attributes) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    row: row,
    timestamp: timestamp,
    attributes: attributes
  };
  var args = new Hbase_deleteAllRowTs_args(params);
  try {
    output.writeMessageBegin('deleteAllRowTs', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_deleteAllRowTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_deleteAllRowTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null);
};

HbaseClient.prototype.scannerOpenWithScan = function(tableName, scan, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_scannerOpenWithScan(tableName, scan, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_scannerOpenWithScan(tableName, scan, attributes);
  }
};

HbaseClient.prototype.send_scannerOpenWithScan = function(tableName, scan, attributes) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    scan: scan,
    attributes: attributes
  };
  var args = new Hbase_scannerOpenWithScan_args(params);
  try {
    output.writeMessageBegin('scannerOpenWithScan', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_scannerOpenWithScan = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerOpenWithScan_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerOpenWithScan failed: unknown result');
};

HbaseClient.prototype.scannerOpen = function(tableName, startRow, columns, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_scannerOpen(tableName, startRow, columns, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_scannerOpen(tableName, startRow, columns, attributes);
  }
};

HbaseClient.prototype.send_scannerOpen = function(tableName, startRow, columns, attributes) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    startRow: startRow,
    columns: columns,
    attributes: attributes
  };
  var args = new Hbase_scannerOpen_args(params);
  try {
    output.writeMessageBegin('scannerOpen', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_scannerOpen = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerOpen_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerOpen failed: unknown result');
};

HbaseClient.prototype.scannerOpenWithStop = function(tableName, startRow, stopRow, columns, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_scannerOpenWithStop(tableName, startRow, stopRow, columns, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_scannerOpenWithStop(tableName, startRow, stopRow, columns, attributes);
  }
};

HbaseClient.prototype.send_scannerOpenWithStop = function(tableName, startRow, stopRow, columns, attributes) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    startRow: startRow,
    stopRow: stopRow,
    columns: columns,
    attributes: attributes
  };
  var args = new Hbase_scannerOpenWithStop_args(params);
  try {
    output.writeMessageBegin('scannerOpenWithStop', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_scannerOpenWithStop = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerOpenWithStop_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerOpenWithStop failed: unknown result');
};

HbaseClient.prototype.scannerOpenWithPrefix = function(tableName, startAndPrefix, columns, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_scannerOpenWithPrefix(tableName, startAndPrefix, columns, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_scannerOpenWithPrefix(tableName, startAndPrefix, columns, attributes);
  }
};

HbaseClient.prototype.send_scannerOpenWithPrefix = function(tableName, startAndPrefix, columns, attributes) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    startAndPrefix: startAndPrefix,
    columns: columns,
    attributes: attributes
  };
  var args = new Hbase_scannerOpenWithPrefix_args(params);
  try {
    output.writeMessageBegin('scannerOpenWithPrefix', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_scannerOpenWithPrefix = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerOpenWithPrefix_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerOpenWithPrefix failed: unknown result');
};

HbaseClient.prototype.scannerOpenTs = function(tableName, startRow, columns, timestamp, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_scannerOpenTs(tableName, startRow, columns, timestamp, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_scannerOpenTs(tableName, startRow, columns, timestamp, attributes);
  }
};

HbaseClient.prototype.send_scannerOpenTs = function(tableName, startRow, columns, timestamp, attributes) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    startRow: startRow,
    columns: columns,
    timestamp: timestamp,
    attributes: attributes
  };
  var args = new Hbase_scannerOpenTs_args(params);
  try {
    output.writeMessageBegin('scannerOpenTs', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_scannerOpenTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerOpenTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerOpenTs failed: unknown result');
};

HbaseClient.prototype.scannerOpenWithStopTs = function(tableName, startRow, stopRow, columns, timestamp, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_scannerOpenWithStopTs(tableName, startRow, stopRow, columns, timestamp, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_scannerOpenWithStopTs(tableName, startRow, stopRow, columns, timestamp, attributes);
  }
};

HbaseClient.prototype.send_scannerOpenWithStopTs = function(tableName, startRow, stopRow, columns, timestamp, attributes) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    startRow: startRow,
    stopRow: stopRow,
    columns: columns,
    timestamp: timestamp,
    attributes: attributes
  };
  var args = new Hbase_scannerOpenWithStopTs_args(params);
  try {
    output.writeMessageBegin('scannerOpenWithStopTs', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_scannerOpenWithStopTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerOpenWithStopTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerOpenWithStopTs failed: unknown result');
};

HbaseClient.prototype.scannerGet = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_scannerGet(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_scannerGet(id);
  }
};

HbaseClient.prototype.send_scannerGet = function(id) {
  var output = new this.pClass(this.output);
  var params = {
    id: id
  };
  var args = new Hbase_scannerGet_args(params);
  try {
    output.writeMessageBegin('scannerGet', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_scannerGet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerGet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerGet failed: unknown result');
};

HbaseClient.prototype.scannerGetList = function(id, nbRows, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_scannerGetList(id, nbRows);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_scannerGetList(id, nbRows);
  }
};

HbaseClient.prototype.send_scannerGetList = function(id, nbRows) {
  var output = new this.pClass(this.output);
  var params = {
    id: id,
    nbRows: nbRows
  };
  var args = new Hbase_scannerGetList_args(params);
  try {
    output.writeMessageBegin('scannerGetList', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_scannerGetList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerGetList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerGetList failed: unknown result');
};

HbaseClient.prototype.scannerClose = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_scannerClose(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_scannerClose(id);
  }
};

HbaseClient.prototype.send_scannerClose = function(id) {
  var output = new this.pClass(this.output);
  var params = {
    id: id
  };
  var args = new Hbase_scannerClose_args(params);
  try {
    output.writeMessageBegin('scannerClose', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_scannerClose = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerClose_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  callback(null);
};

HbaseClient.prototype.getRowOrBefore = function(tableName, row, family, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRowOrBefore(tableName, row, family);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRowOrBefore(tableName, row, family);
  }
};

HbaseClient.prototype.send_getRowOrBefore = function(tableName, row, family) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    row: row,
    family: family
  };
  var args = new Hbase_getRowOrBefore_args(params);
  try {
    output.writeMessageBegin('getRowOrBefore', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_getRowOrBefore = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRowOrBefore_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRowOrBefore failed: unknown result');
};

HbaseClient.prototype.getRegionInfo = function(row, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRegionInfo(row);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRegionInfo(row);
  }
};

HbaseClient.prototype.send_getRegionInfo = function(row) {
  var output = new this.pClass(this.output);
  var params = {
    row: row
  };
  var args = new Hbase_getRegionInfo_args(params);
  try {
    output.writeMessageBegin('getRegionInfo', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_getRegionInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRegionInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRegionInfo failed: unknown result');
};

HbaseClient.prototype.append = function(append, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_append(append);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_append(append);
  }
};

HbaseClient.prototype.send_append = function(append) {
  var output = new this.pClass(this.output);
  var params = {
    append: append
  };
  var args = new Hbase_append_args(params);
  try {
    output.writeMessageBegin('append', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_append = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_append_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('append failed: unknown result');
};

HbaseClient.prototype.checkAndPut = function(tableName, row, column, value, mput, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_checkAndPut(tableName, row, column, value, mput, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_checkAndPut(tableName, row, column, value, mput, attributes);
  }
};

HbaseClient.prototype.send_checkAndPut = function(tableName, row, column, value, mput, attributes) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    row: row,
    column: column,
    value: value,
    mput: mput,
    attributes: attributes
  };
  var args = new Hbase_checkAndPut_args(params);
  try {
    output.writeMessageBegin('checkAndPut', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

HbaseClient.prototype.recv_checkAndPut = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_checkAndPut_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('checkAndPut failed: unknown result');
};
var HbaseProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
HbaseProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
HbaseProcessor.prototype.process_enableTable = function(seqid, input, output) {
  var args = new Hbase_enableTable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.enableTable.length === 1) {
    Q.fcall(this._handler.enableTable.bind(this._handler),
      args.tableName
    ).then(function(result) {
      var result_obj = new Hbase_enableTable_result({success: result});
      output.writeMessageBegin("enableTable", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError) {
        result = new Hbase_enableTable_result(err);
        output.writeMessageBegin("enableTable", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("enableTable", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.enableTable(args.tableName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError) {
        result_obj = new Hbase_enableTable_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("enableTable", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("enableTable", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_disableTable = function(seqid, input, output) {
  var args = new Hbase_disableTable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.disableTable.length === 1) {
    Q.fcall(this._handler.disableTable.bind(this._handler),
      args.tableName
    ).then(function(result) {
      var result_obj = new Hbase_disableTable_result({success: result});
      output.writeMessageBegin("disableTable", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError) {
        result = new Hbase_disableTable_result(err);
        output.writeMessageBegin("disableTable", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("disableTable", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.disableTable(args.tableName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError) {
        result_obj = new Hbase_disableTable_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("disableTable", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("disableTable", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_isTableEnabled = function(seqid, input, output) {
  var args = new Hbase_isTableEnabled_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isTableEnabled.length === 1) {
    Q.fcall(this._handler.isTableEnabled.bind(this._handler),
      args.tableName
    ).then(function(result) {
      var result_obj = new Hbase_isTableEnabled_result({success: result});
      output.writeMessageBegin("isTableEnabled", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError) {
        result = new Hbase_isTableEnabled_result(err);
        output.writeMessageBegin("isTableEnabled", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isTableEnabled", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.isTableEnabled(args.tableName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError) {
        result_obj = new Hbase_isTableEnabled_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isTableEnabled", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isTableEnabled", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_compact = function(seqid, input, output) {
  var args = new Hbase_compact_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.compact.length === 1) {
    Q.fcall(this._handler.compact.bind(this._handler),
      args.tableNameOrRegionName
    ).then(function(result) {
      var result_obj = new Hbase_compact_result({success: result});
      output.writeMessageBegin("compact", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError) {
        result = new Hbase_compact_result(err);
        output.writeMessageBegin("compact", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("compact", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.compact(args.tableNameOrRegionName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError) {
        result_obj = new Hbase_compact_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("compact", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("compact", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_majorCompact = function(seqid, input, output) {
  var args = new Hbase_majorCompact_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.majorCompact.length === 1) {
    Q.fcall(this._handler.majorCompact.bind(this._handler),
      args.tableNameOrRegionName
    ).then(function(result) {
      var result_obj = new Hbase_majorCompact_result({success: result});
      output.writeMessageBegin("majorCompact", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError) {
        result = new Hbase_majorCompact_result(err);
        output.writeMessageBegin("majorCompact", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("majorCompact", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.majorCompact(args.tableNameOrRegionName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError) {
        result_obj = new Hbase_majorCompact_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("majorCompact", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("majorCompact", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_getTableNames = function(seqid, input, output) {
  var args = new Hbase_getTableNames_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTableNames.length === 0) {
    Q.fcall(this._handler.getTableNames.bind(this._handler)
    ).then(function(result) {
      var result_obj = new Hbase_getTableNames_result({success: result});
      output.writeMessageBegin("getTableNames", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError) {
        result = new Hbase_getTableNames_result(err);
        output.writeMessageBegin("getTableNames", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTableNames", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getTableNames(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError) {
        result_obj = new Hbase_getTableNames_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getTableNames", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTableNames", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_getColumnDescriptors = function(seqid, input, output) {
  var args = new Hbase_getColumnDescriptors_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getColumnDescriptors.length === 1) {
    Q.fcall(this._handler.getColumnDescriptors.bind(this._handler),
      args.tableName
    ).then(function(result) {
      var result_obj = new Hbase_getColumnDescriptors_result({success: result});
      output.writeMessageBegin("getColumnDescriptors", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError) {
        result = new Hbase_getColumnDescriptors_result(err);
        output.writeMessageBegin("getColumnDescriptors", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getColumnDescriptors", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getColumnDescriptors(args.tableName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError) {
        result_obj = new Hbase_getColumnDescriptors_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getColumnDescriptors", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getColumnDescriptors", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_getTableRegions = function(seqid, input, output) {
  var args = new Hbase_getTableRegions_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTableRegions.length === 1) {
    Q.fcall(this._handler.getTableRegions.bind(this._handler),
      args.tableName
    ).then(function(result) {
      var result_obj = new Hbase_getTableRegions_result({success: result});
      output.writeMessageBegin("getTableRegions", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError) {
        result = new Hbase_getTableRegions_result(err);
        output.writeMessageBegin("getTableRegions", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTableRegions", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getTableRegions(args.tableName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError) {
        result_obj = new Hbase_getTableRegions_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getTableRegions", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTableRegions", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_createTable = function(seqid, input, output) {
  var args = new Hbase_createTable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createTable.length === 2) {
    Q.fcall(this._handler.createTable.bind(this._handler),
      args.tableName,
      args.columnFamilies
    ).then(function(result) {
      var result_obj = new Hbase_createTable_result({success: result});
      output.writeMessageBegin("createTable", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError || err instanceof ttypes.IllegalArgument || err instanceof ttypes.AlreadyExists) {
        result = new Hbase_createTable_result(err);
        output.writeMessageBegin("createTable", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createTable", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.createTable(args.tableName, args.columnFamilies, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError || err instanceof ttypes.IllegalArgument || err instanceof ttypes.AlreadyExists) {
        result_obj = new Hbase_createTable_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("createTable", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createTable", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_deleteTable = function(seqid, input, output) {
  var args = new Hbase_deleteTable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteTable.length === 1) {
    Q.fcall(this._handler.deleteTable.bind(this._handler),
      args.tableName
    ).then(function(result) {
      var result_obj = new Hbase_deleteTable_result({success: result});
      output.writeMessageBegin("deleteTable", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError) {
        result = new Hbase_deleteTable_result(err);
        output.writeMessageBegin("deleteTable", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteTable", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.deleteTable(args.tableName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError) {
        result_obj = new Hbase_deleteTable_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteTable", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteTable", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_get = function(seqid, input, output) {
  var args = new Hbase_get_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get.length === 4) {
    Q.fcall(this._handler.get.bind(this._handler),
      args.tableName,
      args.row,
      args.column,
      args.attributes
    ).then(function(result) {
      var result_obj = new Hbase_get_result({success: result});
      output.writeMessageBegin("get", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError) {
        result = new Hbase_get_result(err);
        output.writeMessageBegin("get", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get(args.tableName, args.row, args.column, args.attributes, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError) {
        result_obj = new Hbase_get_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_getVer = function(seqid, input, output) {
  var args = new Hbase_getVer_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getVer.length === 5) {
    Q.fcall(this._handler.getVer.bind(this._handler),
      args.tableName,
      args.row,
      args.column,
      args.numVersions,
      args.attributes
    ).then(function(result) {
      var result_obj = new Hbase_getVer_result({success: result});
      output.writeMessageBegin("getVer", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError) {
        result = new Hbase_getVer_result(err);
        output.writeMessageBegin("getVer", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getVer", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getVer(args.tableName, args.row, args.column, args.numVersions, args.attributes, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError) {
        result_obj = new Hbase_getVer_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getVer", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getVer", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_getVerTs = function(seqid, input, output) {
  var args = new Hbase_getVerTs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getVerTs.length === 6) {
    Q.fcall(this._handler.getVerTs.bind(this._handler),
      args.tableName,
      args.row,
      args.column,
      args.timestamp,
      args.numVersions,
      args.attributes
    ).then(function(result) {
      var result_obj = new Hbase_getVerTs_result({success: result});
      output.writeMessageBegin("getVerTs", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError) {
        result = new Hbase_getVerTs_result(err);
        output.writeMessageBegin("getVerTs", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getVerTs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getVerTs(args.tableName, args.row, args.column, args.timestamp, args.numVersions, args.attributes, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError) {
        result_obj = new Hbase_getVerTs_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getVerTs", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getVerTs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_getRow = function(seqid, input, output) {
  var args = new Hbase_getRow_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRow.length === 3) {
    Q.fcall(this._handler.getRow.bind(this._handler),
      args.tableName,
      args.row,
      args.attributes
    ).then(function(result) {
      var result_obj = new Hbase_getRow_result({success: result});
      output.writeMessageBegin("getRow", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError) {
        result = new Hbase_getRow_result(err);
        output.writeMessageBegin("getRow", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRow", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getRow(args.tableName, args.row, args.attributes, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError) {
        result_obj = new Hbase_getRow_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getRow", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRow", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_getRowWithColumns = function(seqid, input, output) {
  var args = new Hbase_getRowWithColumns_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRowWithColumns.length === 4) {
    Q.fcall(this._handler.getRowWithColumns.bind(this._handler),
      args.tableName,
      args.row,
      args.columns,
      args.attributes
    ).then(function(result) {
      var result_obj = new Hbase_getRowWithColumns_result({success: result});
      output.writeMessageBegin("getRowWithColumns", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError) {
        result = new Hbase_getRowWithColumns_result(err);
        output.writeMessageBegin("getRowWithColumns", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRowWithColumns", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getRowWithColumns(args.tableName, args.row, args.columns, args.attributes, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError) {
        result_obj = new Hbase_getRowWithColumns_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getRowWithColumns", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRowWithColumns", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_getRowTs = function(seqid, input, output) {
  var args = new Hbase_getRowTs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRowTs.length === 4) {
    Q.fcall(this._handler.getRowTs.bind(this._handler),
      args.tableName,
      args.row,
      args.timestamp,
      args.attributes
    ).then(function(result) {
      var result_obj = new Hbase_getRowTs_result({success: result});
      output.writeMessageBegin("getRowTs", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError) {
        result = new Hbase_getRowTs_result(err);
        output.writeMessageBegin("getRowTs", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRowTs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getRowTs(args.tableName, args.row, args.timestamp, args.attributes, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError) {
        result_obj = new Hbase_getRowTs_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getRowTs", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRowTs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_getRowWithColumnsTs = function(seqid, input, output) {
  var args = new Hbase_getRowWithColumnsTs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRowWithColumnsTs.length === 5) {
    Q.fcall(this._handler.getRowWithColumnsTs.bind(this._handler),
      args.tableName,
      args.row,
      args.columns,
      args.timestamp,
      args.attributes
    ).then(function(result) {
      var result_obj = new Hbase_getRowWithColumnsTs_result({success: result});
      output.writeMessageBegin("getRowWithColumnsTs", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError) {
        result = new Hbase_getRowWithColumnsTs_result(err);
        output.writeMessageBegin("getRowWithColumnsTs", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRowWithColumnsTs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getRowWithColumnsTs(args.tableName, args.row, args.columns, args.timestamp, args.attributes, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError) {
        result_obj = new Hbase_getRowWithColumnsTs_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getRowWithColumnsTs", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRowWithColumnsTs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_getRows = function(seqid, input, output) {
  var args = new Hbase_getRows_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRows.length === 3) {
    Q.fcall(this._handler.getRows.bind(this._handler),
      args.tableName,
      args.rows,
      args.attributes
    ).then(function(result) {
      var result_obj = new Hbase_getRows_result({success: result});
      output.writeMessageBegin("getRows", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError) {
        result = new Hbase_getRows_result(err);
        output.writeMessageBegin("getRows", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRows", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getRows(args.tableName, args.rows, args.attributes, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError) {
        result_obj = new Hbase_getRows_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getRows", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRows", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_getRowsWithColumns = function(seqid, input, output) {
  var args = new Hbase_getRowsWithColumns_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRowsWithColumns.length === 4) {
    Q.fcall(this._handler.getRowsWithColumns.bind(this._handler),
      args.tableName,
      args.rows,
      args.columns,
      args.attributes
    ).then(function(result) {
      var result_obj = new Hbase_getRowsWithColumns_result({success: result});
      output.writeMessageBegin("getRowsWithColumns", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError) {
        result = new Hbase_getRowsWithColumns_result(err);
        output.writeMessageBegin("getRowsWithColumns", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRowsWithColumns", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getRowsWithColumns(args.tableName, args.rows, args.columns, args.attributes, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError) {
        result_obj = new Hbase_getRowsWithColumns_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getRowsWithColumns", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRowsWithColumns", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_getRowsTs = function(seqid, input, output) {
  var args = new Hbase_getRowsTs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRowsTs.length === 4) {
    Q.fcall(this._handler.getRowsTs.bind(this._handler),
      args.tableName,
      args.rows,
      args.timestamp,
      args.attributes
    ).then(function(result) {
      var result_obj = new Hbase_getRowsTs_result({success: result});
      output.writeMessageBegin("getRowsTs", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError) {
        result = new Hbase_getRowsTs_result(err);
        output.writeMessageBegin("getRowsTs", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRowsTs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getRowsTs(args.tableName, args.rows, args.timestamp, args.attributes, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError) {
        result_obj = new Hbase_getRowsTs_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getRowsTs", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRowsTs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_getRowsWithColumnsTs = function(seqid, input, output) {
  var args = new Hbase_getRowsWithColumnsTs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRowsWithColumnsTs.length === 5) {
    Q.fcall(this._handler.getRowsWithColumnsTs.bind(this._handler),
      args.tableName,
      args.rows,
      args.columns,
      args.timestamp,
      args.attributes
    ).then(function(result) {
      var result_obj = new Hbase_getRowsWithColumnsTs_result({success: result});
      output.writeMessageBegin("getRowsWithColumnsTs", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError) {
        result = new Hbase_getRowsWithColumnsTs_result(err);
        output.writeMessageBegin("getRowsWithColumnsTs", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRowsWithColumnsTs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getRowsWithColumnsTs(args.tableName, args.rows, args.columns, args.timestamp, args.attributes, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError) {
        result_obj = new Hbase_getRowsWithColumnsTs_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getRowsWithColumnsTs", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRowsWithColumnsTs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_mutateRow = function(seqid, input, output) {
  var args = new Hbase_mutateRow_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.mutateRow.length === 4) {
    Q.fcall(this._handler.mutateRow.bind(this._handler),
      args.tableName,
      args.row,
      args.mutations,
      args.attributes
    ).then(function(result) {
      var result_obj = new Hbase_mutateRow_result({success: result});
      output.writeMessageBegin("mutateRow", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError || err instanceof ttypes.IllegalArgument) {
        result = new Hbase_mutateRow_result(err);
        output.writeMessageBegin("mutateRow", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("mutateRow", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.mutateRow(args.tableName, args.row, args.mutations, args.attributes, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError || err instanceof ttypes.IllegalArgument) {
        result_obj = new Hbase_mutateRow_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("mutateRow", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("mutateRow", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_mutateRowTs = function(seqid, input, output) {
  var args = new Hbase_mutateRowTs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.mutateRowTs.length === 5) {
    Q.fcall(this._handler.mutateRowTs.bind(this._handler),
      args.tableName,
      args.row,
      args.mutations,
      args.timestamp,
      args.attributes
    ).then(function(result) {
      var result_obj = new Hbase_mutateRowTs_result({success: result});
      output.writeMessageBegin("mutateRowTs", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError || err instanceof ttypes.IllegalArgument) {
        result = new Hbase_mutateRowTs_result(err);
        output.writeMessageBegin("mutateRowTs", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("mutateRowTs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.mutateRowTs(args.tableName, args.row, args.mutations, args.timestamp, args.attributes, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError || err instanceof ttypes.IllegalArgument) {
        result_obj = new Hbase_mutateRowTs_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("mutateRowTs", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("mutateRowTs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_mutateRows = function(seqid, input, output) {
  var args = new Hbase_mutateRows_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.mutateRows.length === 3) {
    Q.fcall(this._handler.mutateRows.bind(this._handler),
      args.tableName,
      args.rowBatches,
      args.attributes
    ).then(function(result) {
      var result_obj = new Hbase_mutateRows_result({success: result});
      output.writeMessageBegin("mutateRows", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError || err instanceof ttypes.IllegalArgument) {
        result = new Hbase_mutateRows_result(err);
        output.writeMessageBegin("mutateRows", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("mutateRows", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.mutateRows(args.tableName, args.rowBatches, args.attributes, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError || err instanceof ttypes.IllegalArgument) {
        result_obj = new Hbase_mutateRows_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("mutateRows", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("mutateRows", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_mutateRowsTs = function(seqid, input, output) {
  var args = new Hbase_mutateRowsTs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.mutateRowsTs.length === 4) {
    Q.fcall(this._handler.mutateRowsTs.bind(this._handler),
      args.tableName,
      args.rowBatches,
      args.timestamp,
      args.attributes
    ).then(function(result) {
      var result_obj = new Hbase_mutateRowsTs_result({success: result});
      output.writeMessageBegin("mutateRowsTs", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError || err instanceof ttypes.IllegalArgument) {
        result = new Hbase_mutateRowsTs_result(err);
        output.writeMessageBegin("mutateRowsTs", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("mutateRowsTs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.mutateRowsTs(args.tableName, args.rowBatches, args.timestamp, args.attributes, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError || err instanceof ttypes.IllegalArgument) {
        result_obj = new Hbase_mutateRowsTs_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("mutateRowsTs", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("mutateRowsTs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_atomicIncrement = function(seqid, input, output) {
  var args = new Hbase_atomicIncrement_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.atomicIncrement.length === 4) {
    Q.fcall(this._handler.atomicIncrement.bind(this._handler),
      args.tableName,
      args.row,
      args.column,
      args.value
    ).then(function(result) {
      var result_obj = new Hbase_atomicIncrement_result({success: result});
      output.writeMessageBegin("atomicIncrement", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError || err instanceof ttypes.IllegalArgument) {
        result = new Hbase_atomicIncrement_result(err);
        output.writeMessageBegin("atomicIncrement", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("atomicIncrement", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.atomicIncrement(args.tableName, args.row, args.column, args.value, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError || err instanceof ttypes.IllegalArgument) {
        result_obj = new Hbase_atomicIncrement_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("atomicIncrement", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("atomicIncrement", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_deleteAll = function(seqid, input, output) {
  var args = new Hbase_deleteAll_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteAll.length === 4) {
    Q.fcall(this._handler.deleteAll.bind(this._handler),
      args.tableName,
      args.row,
      args.column,
      args.attributes
    ).then(function(result) {
      var result_obj = new Hbase_deleteAll_result({success: result});
      output.writeMessageBegin("deleteAll", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError) {
        result = new Hbase_deleteAll_result(err);
        output.writeMessageBegin("deleteAll", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteAll", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.deleteAll(args.tableName, args.row, args.column, args.attributes, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError) {
        result_obj = new Hbase_deleteAll_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteAll", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteAll", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_deleteAllTs = function(seqid, input, output) {
  var args = new Hbase_deleteAllTs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteAllTs.length === 5) {
    Q.fcall(this._handler.deleteAllTs.bind(this._handler),
      args.tableName,
      args.row,
      args.column,
      args.timestamp,
      args.attributes
    ).then(function(result) {
      var result_obj = new Hbase_deleteAllTs_result({success: result});
      output.writeMessageBegin("deleteAllTs", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError) {
        result = new Hbase_deleteAllTs_result(err);
        output.writeMessageBegin("deleteAllTs", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteAllTs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.deleteAllTs(args.tableName, args.row, args.column, args.timestamp, args.attributes, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError) {
        result_obj = new Hbase_deleteAllTs_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteAllTs", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteAllTs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_deleteAllRow = function(seqid, input, output) {
  var args = new Hbase_deleteAllRow_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteAllRow.length === 3) {
    Q.fcall(this._handler.deleteAllRow.bind(this._handler),
      args.tableName,
      args.row,
      args.attributes
    ).then(function(result) {
      var result_obj = new Hbase_deleteAllRow_result({success: result});
      output.writeMessageBegin("deleteAllRow", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError) {
        result = new Hbase_deleteAllRow_result(err);
        output.writeMessageBegin("deleteAllRow", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteAllRow", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.deleteAllRow(args.tableName, args.row, args.attributes, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError) {
        result_obj = new Hbase_deleteAllRow_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteAllRow", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteAllRow", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_increment = function(seqid, input, output) {
  var args = new Hbase_increment_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.increment.length === 1) {
    Q.fcall(this._handler.increment.bind(this._handler),
      args.increment
    ).then(function(result) {
      var result_obj = new Hbase_increment_result({success: result});
      output.writeMessageBegin("increment", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError) {
        result = new Hbase_increment_result(err);
        output.writeMessageBegin("increment", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("increment", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.increment(args.increment, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError) {
        result_obj = new Hbase_increment_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("increment", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("increment", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_incrementRows = function(seqid, input, output) {
  var args = new Hbase_incrementRows_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.incrementRows.length === 1) {
    Q.fcall(this._handler.incrementRows.bind(this._handler),
      args.increments
    ).then(function(result) {
      var result_obj = new Hbase_incrementRows_result({success: result});
      output.writeMessageBegin("incrementRows", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError) {
        result = new Hbase_incrementRows_result(err);
        output.writeMessageBegin("incrementRows", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("incrementRows", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.incrementRows(args.increments, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError) {
        result_obj = new Hbase_incrementRows_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("incrementRows", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("incrementRows", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_deleteAllRowTs = function(seqid, input, output) {
  var args = new Hbase_deleteAllRowTs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteAllRowTs.length === 4) {
    Q.fcall(this._handler.deleteAllRowTs.bind(this._handler),
      args.tableName,
      args.row,
      args.timestamp,
      args.attributes
    ).then(function(result) {
      var result_obj = new Hbase_deleteAllRowTs_result({success: result});
      output.writeMessageBegin("deleteAllRowTs", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError) {
        result = new Hbase_deleteAllRowTs_result(err);
        output.writeMessageBegin("deleteAllRowTs", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteAllRowTs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.deleteAllRowTs(args.tableName, args.row, args.timestamp, args.attributes, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError) {
        result_obj = new Hbase_deleteAllRowTs_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteAllRowTs", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteAllRowTs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_scannerOpenWithScan = function(seqid, input, output) {
  var args = new Hbase_scannerOpenWithScan_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.scannerOpenWithScan.length === 3) {
    Q.fcall(this._handler.scannerOpenWithScan.bind(this._handler),
      args.tableName,
      args.scan,
      args.attributes
    ).then(function(result) {
      var result_obj = new Hbase_scannerOpenWithScan_result({success: result});
      output.writeMessageBegin("scannerOpenWithScan", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError) {
        result = new Hbase_scannerOpenWithScan_result(err);
        output.writeMessageBegin("scannerOpenWithScan", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scannerOpenWithScan", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.scannerOpenWithScan(args.tableName, args.scan, args.attributes, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError) {
        result_obj = new Hbase_scannerOpenWithScan_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("scannerOpenWithScan", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scannerOpenWithScan", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_scannerOpen = function(seqid, input, output) {
  var args = new Hbase_scannerOpen_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.scannerOpen.length === 4) {
    Q.fcall(this._handler.scannerOpen.bind(this._handler),
      args.tableName,
      args.startRow,
      args.columns,
      args.attributes
    ).then(function(result) {
      var result_obj = new Hbase_scannerOpen_result({success: result});
      output.writeMessageBegin("scannerOpen", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError) {
        result = new Hbase_scannerOpen_result(err);
        output.writeMessageBegin("scannerOpen", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scannerOpen", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.scannerOpen(args.tableName, args.startRow, args.columns, args.attributes, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError) {
        result_obj = new Hbase_scannerOpen_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("scannerOpen", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scannerOpen", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_scannerOpenWithStop = function(seqid, input, output) {
  var args = new Hbase_scannerOpenWithStop_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.scannerOpenWithStop.length === 5) {
    Q.fcall(this._handler.scannerOpenWithStop.bind(this._handler),
      args.tableName,
      args.startRow,
      args.stopRow,
      args.columns,
      args.attributes
    ).then(function(result) {
      var result_obj = new Hbase_scannerOpenWithStop_result({success: result});
      output.writeMessageBegin("scannerOpenWithStop", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError) {
        result = new Hbase_scannerOpenWithStop_result(err);
        output.writeMessageBegin("scannerOpenWithStop", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scannerOpenWithStop", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.scannerOpenWithStop(args.tableName, args.startRow, args.stopRow, args.columns, args.attributes, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError) {
        result_obj = new Hbase_scannerOpenWithStop_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("scannerOpenWithStop", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scannerOpenWithStop", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_scannerOpenWithPrefix = function(seqid, input, output) {
  var args = new Hbase_scannerOpenWithPrefix_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.scannerOpenWithPrefix.length === 4) {
    Q.fcall(this._handler.scannerOpenWithPrefix.bind(this._handler),
      args.tableName,
      args.startAndPrefix,
      args.columns,
      args.attributes
    ).then(function(result) {
      var result_obj = new Hbase_scannerOpenWithPrefix_result({success: result});
      output.writeMessageBegin("scannerOpenWithPrefix", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError) {
        result = new Hbase_scannerOpenWithPrefix_result(err);
        output.writeMessageBegin("scannerOpenWithPrefix", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scannerOpenWithPrefix", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.scannerOpenWithPrefix(args.tableName, args.startAndPrefix, args.columns, args.attributes, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError) {
        result_obj = new Hbase_scannerOpenWithPrefix_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("scannerOpenWithPrefix", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scannerOpenWithPrefix", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_scannerOpenTs = function(seqid, input, output) {
  var args = new Hbase_scannerOpenTs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.scannerOpenTs.length === 5) {
    Q.fcall(this._handler.scannerOpenTs.bind(this._handler),
      args.tableName,
      args.startRow,
      args.columns,
      args.timestamp,
      args.attributes
    ).then(function(result) {
      var result_obj = new Hbase_scannerOpenTs_result({success: result});
      output.writeMessageBegin("scannerOpenTs", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError) {
        result = new Hbase_scannerOpenTs_result(err);
        output.writeMessageBegin("scannerOpenTs", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scannerOpenTs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.scannerOpenTs(args.tableName, args.startRow, args.columns, args.timestamp, args.attributes, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError) {
        result_obj = new Hbase_scannerOpenTs_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("scannerOpenTs", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scannerOpenTs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_scannerOpenWithStopTs = function(seqid, input, output) {
  var args = new Hbase_scannerOpenWithStopTs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.scannerOpenWithStopTs.length === 6) {
    Q.fcall(this._handler.scannerOpenWithStopTs.bind(this._handler),
      args.tableName,
      args.startRow,
      args.stopRow,
      args.columns,
      args.timestamp,
      args.attributes
    ).then(function(result) {
      var result_obj = new Hbase_scannerOpenWithStopTs_result({success: result});
      output.writeMessageBegin("scannerOpenWithStopTs", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError) {
        result = new Hbase_scannerOpenWithStopTs_result(err);
        output.writeMessageBegin("scannerOpenWithStopTs", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scannerOpenWithStopTs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.scannerOpenWithStopTs(args.tableName, args.startRow, args.stopRow, args.columns, args.timestamp, args.attributes, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError) {
        result_obj = new Hbase_scannerOpenWithStopTs_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("scannerOpenWithStopTs", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scannerOpenWithStopTs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_scannerGet = function(seqid, input, output) {
  var args = new Hbase_scannerGet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.scannerGet.length === 1) {
    Q.fcall(this._handler.scannerGet.bind(this._handler),
      args.id
    ).then(function(result) {
      var result_obj = new Hbase_scannerGet_result({success: result});
      output.writeMessageBegin("scannerGet", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError || err instanceof ttypes.IllegalArgument) {
        result = new Hbase_scannerGet_result(err);
        output.writeMessageBegin("scannerGet", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scannerGet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.scannerGet(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError || err instanceof ttypes.IllegalArgument) {
        result_obj = new Hbase_scannerGet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("scannerGet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scannerGet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_scannerGetList = function(seqid, input, output) {
  var args = new Hbase_scannerGetList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.scannerGetList.length === 2) {
    Q.fcall(this._handler.scannerGetList.bind(this._handler),
      args.id,
      args.nbRows
    ).then(function(result) {
      var result_obj = new Hbase_scannerGetList_result({success: result});
      output.writeMessageBegin("scannerGetList", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError || err instanceof ttypes.IllegalArgument) {
        result = new Hbase_scannerGetList_result(err);
        output.writeMessageBegin("scannerGetList", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scannerGetList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.scannerGetList(args.id, args.nbRows, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError || err instanceof ttypes.IllegalArgument) {
        result_obj = new Hbase_scannerGetList_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("scannerGetList", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scannerGetList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_scannerClose = function(seqid, input, output) {
  var args = new Hbase_scannerClose_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.scannerClose.length === 1) {
    Q.fcall(this._handler.scannerClose.bind(this._handler),
      args.id
    ).then(function(result) {
      var result_obj = new Hbase_scannerClose_result({success: result});
      output.writeMessageBegin("scannerClose", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError || err instanceof ttypes.IllegalArgument) {
        result = new Hbase_scannerClose_result(err);
        output.writeMessageBegin("scannerClose", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scannerClose", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.scannerClose(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError || err instanceof ttypes.IllegalArgument) {
        result_obj = new Hbase_scannerClose_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("scannerClose", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scannerClose", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_getRowOrBefore = function(seqid, input, output) {
  var args = new Hbase_getRowOrBefore_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRowOrBefore.length === 3) {
    Q.fcall(this._handler.getRowOrBefore.bind(this._handler),
      args.tableName,
      args.row,
      args.family
    ).then(function(result) {
      var result_obj = new Hbase_getRowOrBefore_result({success: result});
      output.writeMessageBegin("getRowOrBefore", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError) {
        result = new Hbase_getRowOrBefore_result(err);
        output.writeMessageBegin("getRowOrBefore", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRowOrBefore", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getRowOrBefore(args.tableName, args.row, args.family, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError) {
        result_obj = new Hbase_getRowOrBefore_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getRowOrBefore", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRowOrBefore", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_getRegionInfo = function(seqid, input, output) {
  var args = new Hbase_getRegionInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRegionInfo.length === 1) {
    Q.fcall(this._handler.getRegionInfo.bind(this._handler),
      args.row
    ).then(function(result) {
      var result_obj = new Hbase_getRegionInfo_result({success: result});
      output.writeMessageBegin("getRegionInfo", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError) {
        result = new Hbase_getRegionInfo_result(err);
        output.writeMessageBegin("getRegionInfo", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRegionInfo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getRegionInfo(args.row, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError) {
        result_obj = new Hbase_getRegionInfo_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getRegionInfo", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRegionInfo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_append = function(seqid, input, output) {
  var args = new Hbase_append_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.append.length === 1) {
    Q.fcall(this._handler.append.bind(this._handler),
      args.append
    ).then(function(result) {
      var result_obj = new Hbase_append_result({success: result});
      output.writeMessageBegin("append", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError) {
        result = new Hbase_append_result(err);
        output.writeMessageBegin("append", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("append", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.append(args.append, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError) {
        result_obj = new Hbase_append_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("append", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("append", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
HbaseProcessor.prototype.process_checkAndPut = function(seqid, input, output) {
  var args = new Hbase_checkAndPut_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.checkAndPut.length === 6) {
    Q.fcall(this._handler.checkAndPut.bind(this._handler),
      args.tableName,
      args.row,
      args.column,
      args.value,
      args.mput,
      args.attributes
    ).then(function(result) {
      var result_obj = new Hbase_checkAndPut_result({success: result});
      output.writeMessageBegin("checkAndPut", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.IOError || err instanceof ttypes.IllegalArgument) {
        result = new Hbase_checkAndPut_result(err);
        output.writeMessageBegin("checkAndPut", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("checkAndPut", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.checkAndPut(args.tableName, args.row, args.column, args.value, args.mput, args.attributes, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.IOError || err instanceof ttypes.IllegalArgument) {
        result_obj = new Hbase_checkAndPut_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("checkAndPut", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("checkAndPut", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
